// ==UserScript==
// @name        Youtube Live Clock
// @namespace   Violentmonkey Scripts
// @match       https://www.youtube.com/*
// @match       https://www.youtube.com/watch?v=*
// @match       https://www.youtube.com/live/*
// @match       https://www.youtube.com/embed/*
// @grant       GM_registerMenuCommand
// @grant       GM_setValue
// @grant       GM_getValue
// @version     1.0.7
// @author      Nekone
// @description 2024/6/3 下午3:47:05
// @icon        https://www.google.com/s2/favicons?sz=64&domain=youtube.com
// ==/UserScript==

'use strict'

const language = {
    'zh-TW': {
        title: 'Live Clock 顯示設定',
        save: '儲存',
        review: '預覽',
        pattern: '【影片上】的顯示規則',
        table_head: ['說明', '選項', '前綴', '參考值', '後綴', '預覽'],
        table_description: {
            'time-current': '目前時間',
            'time-separator': '分隔符號 (Live 不適用)',
            'time-duration': '影片時長 (Live 不適用)',
            'status-live-latency': '實況延遲ℹ️',
            'status-buffer-health': '緩衝大小',
            'status-view-count': '觀看數 / 觀眾數ℹ️',
            'time-date': '實況開始時間+目前時間ℹ️',
            'time-now': '本機時間',
            'video-playbackrate': '播放速度',
            'video-volume': '音量',
            'video-quality': '畫質',
            'codecs-video': '視訊編碼格式',
            'codecs-audio': '音訊編碼格式',
        },
        option_description: {
            'status-live-latency': '根據 YouTube Help Center，目前實況延遲有三個選項，取決於實況主設定：\n1. Normal latency\n2. Low latency (less than 10 seconds.)\n3. Ultra-low latency (less than 5 seconds.)',
            'status-view-count': '嵌入影片 (embed) 只顯示【觀看數】\nP.S. Holodex 皆為嵌入影片。',
            'time-date': '此選項為方便你各位找到準確的時間軸，範例如下：\n實況開始時間為【2025/03/14 (五) 19:01:06】\n目前播放時間為【1:23:45】\n則輸出的文字為【2025/03/14 (五) 20:24:51】',
        },
    }
}[navigator.language];

const GM_keys = {
    pattern_on_video: 'pattern_on_video',
    pattern_on_controller: 'pattern_on_controller',
    text_info_prefix: 'text_info_prefix',
    text_info_postfix: 'text_info_postfix',
};

const default_values = {
    pattern_on_video: `{time-current} {time-separator} {time-duration} {status-live-latency} {status-buffer-health} {status-view-count} {time-date} {time-now} ({video-playbackrate}/{video-volume}/{video-quality})`,
    pattern_on_controller: `{time-current} {time-separator} {time-duration} {time-date} / {codecs-video} / {codecs-audio}`,
    text_info_prefix: {
        'time-current': '',
        'time-separator': '',
        'time-duration': '',
        'status-live-latency': '(L/',
        'status-buffer-health': '(B/',
        'status-view-count': '(V/',
        'time-date': '(',
        'time-now': '[',
        'video-playbackrate': '',
        'video-volume': '',
        'video-quality': '',
        'codecs-video': '',
        'codecs-audio': '',
    },
    text_info_postfix: {
        'time-current': '',
        'time-separator': '',
        'time-duration': '',
        'status-live-latency': ')',
        'status-buffer-health': ')',
        'status-view-count': ')',
        'time-date': ')',
        'time-now': ']',
        'video-playbackrate': 'x',
        'video-volume': '%',
        'video-quality': '',
        'codecs-video': '',
        'codecs-audio': '',
    },
    text_info_sample: {
        'time-current': '1:23:45',
        'time-separator': '/',
        'time-duration': '11:54:59',
        'status-live-latency': '4.45s',
        'status-buffer-health': '4.45s',
        'status-view-count': '114,514',
        'time-date': '2025/03/14 (五) 19:01:06',
        'time-now': Date().toString().split(' ')[4],
        'video-playbackrate': '1.25',
        'video-volume': '80',
        'video-quality': '1080p60',
        'codecs-video': 'vp09 (303)',
        'codecs-audio': 'mp4a (140)',
    }
}

const css_setting = `

.live-clock-wrapper {
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 9999;
    display: flex;
    align-content: center;
    justify-content: center;
    flex-wrap: wrap;
}

.live-clock-menu {
    background-color: #F3F3F3;
    border: 1px solid #CCCCCC;
    border-radius: 10px;
    width: 888px;
}

.live-clock-menu-title {
    display: flex;
    justify-content: space-between;
    font-size: 20px;
    margin: 10px 20px;
}

.live-clock-menu-save {
    background-color: #1DA1F2;
    color: #FFFFFF;
    padding: 0px 20px;
    border-radius: 100px;
    cursor: pointer;
    font-size: 18px;
}
.live-clock-menu-save:hover {
    background-color: rgba(29, 161, 242, 0.9);
}

.live-clock-content-div {
    margin: 10px;
    border: 1px solid #CCCCCC;
    border-radius: 5px;
}

.live-clock-pattern-on-video {
    font-size: 18px;
    margin: 10px 15px;
}

.live-clock-pattern-textarea {
    width: -webkit-fill-available !important;
    min-height: 50px;
    font-size: 14px;
}

.live-clock-pattern-preview-div {
    display: flex;
    width: -webkit-fill-available;
}

.live-clock-pattern-preview-button {
    background-color: #1DA1F2;
    color: #FFFFFF;
    padding: 0 10px;
    border-radius: 100px;
    min-width: fit-content;
    cursor: pointer;
    font-size: 18px;
    margin-right: 2px;
}
.live-clock-pattern-preview-button :hover {
    background-color: rgba(29, 161, 242, 0.9);
}

.live-clock-pattern-preview-display {
    font-size: 14px;
    width: -webkit-fill-available;
    background: #FFFFFF;
    color: #000000;
}

.live-clock-pattern-tag-div {
    display: flex;
    flex-direction: column;
    margin: 10px;
}

.live-clock-pattern-tag-list {
    display: flex;
}

.live-clock-pattern-tag-button {
    color: #1DA1F2;
    padding: 2px 10px;
    border-radius: 10px;
    border: 1px solid #1DA1F2;
    font-weight: bold;
    cursor: pointer;
    font-size: 14px;
}
.live-clock-pattern-tag-button:hover {
    background-color: rgba(29, 161, 242, 0.1);
}

.live-clock-pattern-tag-input {
    width: 50px;
    justify-self: center;
    display: block;
}

.live-clock-table {
    border-collapse: collapse;
    border: 2px solid rgb(140 140 140);
    font-size: 14px;
    margin: 10px 15px;
    width: -webkit-fill-available;

    .live-clock-thead {
        background-color: rgb(228 240 245);
    }
    .live-clock-tbody > tr:nth-of-type(even) {
        background-color: rgb(237 238 242);
    }
    .live-clock-tr, .live-clock-th, .live-clock-td {
        border: 1px solid rgb(160 160 160);
        padding: 4px;
    }
}

`;

let text_pattern_on_video = GM_getValue(GM_keys.pattern_on_video, default_values.pattern_on_video);
let text_pattern_on_controller = GM_getValue(GM_keys.pattern_on_controller, default_values.pattern_on_controller);
let text_info_prefix = GM_getValue(GM_keys.text_info_prefix, default_values.text_info_prefix);
let text_info_postfix = GM_getValue(GM_keys.text_info_postfix, default_values.text_info_postfix);

let text_info_value = {};
Object.keys(default_values.text_info_sample).forEach((e) => { text_info_value[e] = ''; });

(async function register_menu() {
    try {
        async function register_menu_command_callback() {
            const $element = (parent, tag, content, css_class) => {
                const element = document.createElement(tag);
                if (tag == 'input') { element.value = content || ''; }
                else { element.textContent = content || ''; }
                if (css_class) { css_class.split(' ').forEach((c) => { element.classList.add(c) }); }
                parent.appendChild(element);
                return element;
            };

            text_pattern_on_video = GM_getValue(GM_keys.pattern_on_video, default_values.pattern_on_video);
            text_pattern_on_controller = GM_getValue(GM_keys.pattern_on_controller, default_values.pattern_on_controller);
            text_info_prefix = GM_getValue(GM_keys.text_info_prefix, default_values.text_info_prefix);
            text_info_postfix = GM_getValue(GM_keys.text_info_postfix, default_values.text_info_postfix);

            const menu_wapper = $element(document.body, 'div', null, 'live-clock-wrapper');
            let menu_wapper_close = null;
            menu_wapper.onmousedown = (e) => { menu_wapper_close = e.target == menu_wapper; };
            menu_wapper.onmouseup = (e) => { if (menu_wapper_close && e.target == menu_wapper) menu_wapper.remove(); };

            const div_menu = $element(menu_wapper, 'div', null, 'live-clock-menu');
            const span_title = $element(div_menu, 'span', language.title, 'live-clock-menu-title');

            const div_content = $element(div_menu, 'div', null, 'live-clock-content-div');
            const div_pattern_on_video = $element(div_content, 'div', language.pattern, 'live-clock-pattern-on-video');
            const textarea_pattern_on_video = $element(div_pattern_on_video, 'textarea', text_pattern_on_video, 'live-clock-pattern-textarea');

            const div_pattern_preview = $element(div_pattern_on_video, 'div', null, 'live-clock-pattern-preview-div');
            const button_pattern_preview = $element(div_pattern_preview, 'button', language.review, 'live-clock-pattern-preview-button');
            const input_pattern_display = $element(div_pattern_preview, 'input', null, 'live-clock-pattern-preview-display');
            input_pattern_display.disabled = true;
            button_pattern_preview.onclick = () => {
                input_pattern_display.value = textarea_pattern_on_video.value.replace(/{([^{}:]+)(:[^{}]+)?}/g, (match, key) => `${text_info_prefix[key]}${default_values.text_info_sample[key]}${text_info_postfix[key]}`);
            }
            button_pattern_preview.click();

            const update_input = (key, prefix, postfix, preview) => {
                text_info_prefix[key] = prefix.value;
                text_info_postfix[key] = postfix.value;
                preview.textContent = `${text_info_prefix[key]}${default_values.text_info_sample[key]}${text_info_postfix[key]}`;
            }
            const pattern_table = $element(div_content, 'table', null, 'live-clock-table');
            const thead = $element(pattern_table, 'thead', null, 'live-clock-thead');
            const tbody = $element(pattern_table, 'tbody', null, 'live-clock-tbody');
            let td = null;
            [language.table_head].concat(Object.keys(text_info_value)).forEach((key, index) => {
                if (index == 0) {
                    const tr = $element(thead, 'tr', null, 'live-clock-tr');
                    key.forEach((e) => { $element(tr, 'th', e, 'live-clock-th'); });
                }
                else {
                    const tr = $element(tbody, 'tr', null, 'live-clock-tr');

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const desc = $element(td, 'span', language.table_description[key], null);
                    if (language.option_description[key]) {
                        desc.title = language.option_description[key];
                    }

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const button = $element(td, 'span', `{${key}}`, 'live-clock-pattern-tag-button');

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const prefix = $element(td, 'input', text_info_prefix[key], 'live-clock-pattern-tag-input');

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const sample = $element(td, 'span', default_values.text_info_sample[key], null);

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const postfix = $element(td, 'input', text_info_postfix[key], 'live-clock-pattern-tag-input');

                    td = $element(tr, 'td', null, 'live-clock-td');
                    const preview = $element(td, 'span', `${text_info_prefix[key]}${default_values.text_info_sample[key]}${text_info_postfix[key]}`, null);

                    prefix.oninput = () => { update_input(key, prefix, postfix, preview) };
                    postfix.oninput = () => { update_input(key, prefix, postfix, preview) };
                }
            });

            textarea_pattern_on_video.selectionStart = textarea_pattern_on_video.value.length;
            pattern_table.querySelectorAll('.live-clock-pattern-tag-button').forEach((tag) => {
                tag.onclick = () => {
                    const selection_start = textarea_pattern_on_video.selectionStart;
                    const selection_end = textarea_pattern_on_video.selectionEnd;
                    textarea_pattern_on_video.value = textarea_pattern_on_video.value.substring(0, selection_start) + tag.textContent + textarea_pattern_on_video.value.substring(selection_end);
                    textarea_pattern_on_video.selectionStart = selection_start + tag.innerText.length;
                    textarea_pattern_on_video.selectionEnd = selection_start + tag.innerText.length;
                    textarea_pattern_on_video.focus();
                };
            });

            const btn_save = $element(span_title, 'button', language.save, 'live-clock-menu-save');
            btn_save.onclick = async () => {
                text_pattern_on_video = textarea_pattern_on_video.value
                GM_setValue(GM_keys.pattern_on_video, text_pattern_on_video);
                GM_setValue(GM_keys.pattern_on_controller, text_pattern_on_controller);
                GM_setValue(GM_keys.text_info_prefix, text_info_prefix);
                GM_setValue(GM_keys.text_info_postfix, text_info_postfix);
                menu_wapper.remove();
            };
        }

        add_style(css_setting, 'live-clock-setting');
        GM_registerMenuCommand(language.title, register_menu_command_callback);
    }
    catch (e) {
        console.log(e);
    }
})();

const css_video = `

.ytp-pause-overlay {
    display: none !important;
}

.ytp-tooltip-title,
.ytp-tooltip-text {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    white-space: pre-line !important;
    line-height: 1.3 !important;
}

.ytp-time-on-control {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    line-height: 1.3 !important;
}

.ytp-title-on-video,
.ytp-time-on-video {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    position: absolute !important;
    color: #FFFFFF !important;
    line-height: 1.3 !important;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    width: 100%;
}

`;

let global_span = null;
function print(string) {
    global_span ? global_span.textContent = '( ^)o(^ ) -> ' + string : console.log(string);
}

function add_style(css, id) {
    const style = document.createElement('style');
    style.setAttribute('id', id);
    style.textContent = css;
    document.head.appendChild(style);
}

let microformat = null;
let element_time_on_controller = null;
let element_time_on_video = null;
let element_title_on_video = null;

let html5_video_player = null;
let html5_main_video = null;
let ytd_watch_info_text = null;
let ytp_time_duration = null;

function create_span(selector, text) {
    let element = document.querySelector(`.${selector}`);
    if (!element) {
        element = document.createElement('span');
        element.setAttribute('class', selector);
        element.textContent = text || '';
    }
    return element;
}

function update_tooltip_text() {
    const ytp_tooltip_text = document.querySelector('.ytp-tooltip-text-wrapper .ytp-tooltip-text');
    if (ytp_tooltip_text) {
        const textContent = ytp_tooltip_text.textContent;
        if (textContent.includes(':') && !['(', ')'].some(e => textContent.includes(e))) {
            const rewind_time = Formatter.time_to_seconds(textContent);
            const start_date = microformat?.publication?.[0]?.startDate || microformat.uploadDate;
            if (rewind_time > 0) {
                ytp_tooltip_text.textContent = `${textContent} / ${ytp_time_duration.textContent}\n` + Formatter.date(start_date, rewind_time);
            }
            else {
                const secondsFromStart = Math.round((Date.now() - Date.parse(start_date)) / 1000) + rewind_time;
                ytp_tooltip_text.textContent = `${Formatter.time_from_seconds(secondsFromStart)} / ${textContent}\n` + Formatter.date(start_date, secondsFromStart);
            }
        }
        else if (['音量', '%'].some(e => textContent.includes(e))) {
            ytp_tooltip_text.textContent = `${html5_video_player.getVolume()}%`;
        }
    }
}

function update_text_info_value() {
    const current_time = html5_main_video.currentTime;
    const start_date = microformat?.publication?.[0]?.startDate || microformat.uploadDate;

    const video_stats = Object.assign({}, html5_video_player.getStatsForNerds(), html5_video_player.getVideoStats());
    const live_latency = video_stats['live_latency_secs'];
    const buffer_health = video_stats['buffer_health_seconds'].replace(' ', '');
    const codecs = video_stats['codecs'].split(' / ').map(e => e.split('.').shift()).map(e => e.split(' ').shift());

    const view_count = live_latency ? ytd_watch_info_text?.viewCountProps?.numberText : (Number(microformat.interactionCount) || '').toLocaleString();

    text_info_value['time-current'] = Formatter.time_from_seconds(current_time);
    text_info_value['time-separator'] = !live_latency ? '/' : '';
    text_info_value['time-duration'] = !live_latency ? ytp_time_duration.textContent : '';
    text_info_value['status-live-latency'] = live_latency || '';
    // text_info_value['status-live-latency'] = live_latency ? (live_latency == '0.00s' ? `${((Date.now() - html5_video_player.getMediaReferenceTime() * 1000) / 1000).toFixed(2)}s` : live_latency) : '';
    text_info_value['status-buffer-health'] = buffer_health || '';
    text_info_value['status-view-count'] = view_count || '';
    text_info_value['time-date'] = live_latency ? Formatter.date(null, html5_video_player.getMediaReferenceTime()) : Formatter.date(start_date, current_time);
    text_info_value['time-now'] = Date().toString().split(' ')[4]; // ['Fri', 'Jun', '21', '2024', '21:49:06', 'GMT+0800', '(台北標準時間)']
    text_info_value['video-playbackrate'] = html5_main_video.playbackRate.toFixed(2);
    text_info_value['video-volume'] = `${html5_video_player.getVolume()}`;
    text_info_value['video-quality'] = video_stats['optimal_format'];
    text_info_value['codecs-video'] = `${codecs[0]} (${video_stats['fmt']})`;
    text_info_value['codecs-audio'] = `${codecs[1]} (${video_stats['afmt']})`;

    Object.keys(text_info_value).forEach((key) => { text_info_value[key] = text_info_value[key] ? `${text_info_prefix[key]}${text_info_value[key]}${text_info_postfix[key]}` : ''; });

    if (element_time_on_controller) element_time_on_controller.textContent = text_pattern_on_controller.replace(/{([^{}:]+)(:[^{}]+)?}/g, (match, name) => text_info_value[name]);
    if (element_time_on_video) element_time_on_video.textContent = text_pattern_on_video.replace(/{([^{}:]+)(:[^{}]+)?}/g, (match, name) => text_info_value[name]);
}

async function get_video_microformat() {
    print(`get_video_microformat();`);
    if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
        return JSON.parse((await Waitting.body('#microformat script')).textContent);
    }
    else if (location.href.includes('https://www.youtube.com/embed/')) {
        const video_id = (await Waitting.body('.ytp-title-link')).href.split('/watch?v=').pop();
        return fetch('https://www.youtube.com/youtubei/v1/player?prettyPrint=false', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ context: { client: { clientName: 'WEB', clientVersion: '2.20240821.01.00' } }, video_id: video_id }),
        })
        .then((response) => {
            return response.json();
        })
        .then((data) => {
            const player_microformat_renderer = data.microformat.playerMicroformatRenderer;
            return {
                "interactionCount": player_microformat_renderer.viewCount,
                "name": player_microformat_renderer.title.simpleText,
                "thumbnailUrl": [ player_microformat_renderer.thumbnail.thumbnails?.[0].url ],
                "uploadDate": player_microformat_renderer.uploadDate,
                "publication": [
                    {
                        "startDate": player_microformat_renderer?.liveBroadcastDetails?.startTimestamp,
                        "endDate": player_microformat_renderer?.liveBroadcastDetails?.endTimestamp,
                    }
                ]
            };
        })
        .catch((error) => {
            console.log(error);
        });
    }
}

let timeoutid = null
function change_volume_on_wheel(e) {
    const onYTLSTM = document.querySelector('body[data-ytlstm-theater-mode]');
    if (onYTLSTM || location.href.includes('https://www.youtube.com/embed/')) {
        const volume = html5_video_player.getVolume() + (10 - 5 * e.shiftKey) * (e.deltaY < 0 ? 1 : -1);
        if (volume <= 0) {
            html5_video_player.setVolume(0);
            html5_video_player.mute();
        }
        else {
            html5_video_player.setVolume(volume);
            html5_video_player.unMute();
        }

        const ytp_bezel = document.querySelector('.ytp-bezel');
        const ytp_bezel_text = document.querySelector('.ytp-bezel-text');
        if (ytp_bezel_text && ytp_bezel) {
            ytp_bezel_text.textContent = `${html5_video_player.getVolume()}%`;
            ytp_bezel_text.parentElement.parentElement.setAttribute('class', '');
            ytp_bezel_text.parentElement.parentElement.style.display = '';
            ytp_bezel.style.display = 'none';
            clearTimeout(timeoutid);
            timeoutid = setTimeout(() => {
                ytp_bezel_text.parentElement.parentElement.style.display = 'none';
                ytp_bezel.style.display = '';
            }, 500);
        }
    }
}

function change_clock_on_video_bottom() {
    const video_height = html5_main_video.offsetHeight;
    const video_left = html5_main_video.offsetLeft;
    const video_top = html5_main_video.offsetTop;
    const text_height_time = element_time_on_video.getBoundingClientRect().height;
    element_time_on_video.style.left = `${video_left + 2}px`;
    element_time_on_video.style.top = `${video_height + video_top - text_height_time + (video_top < text_height_time ? video_top : text_height_time + 2)}px`;

    const onYTLSTM = document.querySelector('body[data-ytlstm-theater-mode]')
    if (onYTLSTM) {
        const text_height_title = element_title_on_video.getBoundingClientRect().height;
        element_title_on_video.style.left = `${video_left + 2}px`;
        element_title_on_video.style.top = `${video_top < text_height_title ? 0 : video_top - text_height_title - 2}px`;
        element_title_on_video.style.display = '';
    }
    else {
        element_title_on_video.style.display = 'none';
    }
}

async function main() {
    try {
        add_style(css_video, 'live-clock');

        Waitting.body('.html5-main-video').then((e) => {
            element_time_on_video = create_span('ytp-time-on-video', '( ^)o(^ )');
            global_span = element_time_on_video;
            html5_main_video = e;
            html5_main_video.after(element_time_on_video);
            new MutationObserver(change_clock_on_video_bottom).observe(html5_main_video, { attributes: true });
        });

        Waitting.body('.html5-video-player').then((e) => { html5_video_player = e; });
        Waitting.body('.ytp-time-wrapper').then((e) => {
            element_time_on_controller = create_span('ytp-time-on-control');
            e.appendChild(element_time_on_controller);
        });

        const ytp_time_current = await Waitting.body('.ytp-time-current');
        const ytp_time_separator = await Waitting.body('.ytp-time-separator');
        ytp_time_duration = await Waitting.body('.ytp-time-duration');
        [ytp_time_current, ytp_time_separator, ytp_time_duration].forEach((e) => { e.style.display = 'none' });

        if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
            Waitting.body('#ytd-watch-info-text').then((e) => { ytd_watch_info_text = e; });
            Waitting.body('ytd-watch-metadata #title h1 yt-formatted-string').then((title) => {
                element_title_on_video = create_span('ytp-title-on-video', title.textContent);
                html5_main_video.after(element_title_on_video);
                new MutationObserver(() => { element_title_on_video.textContent = title.textContent }).observe(title, { attributes: true, childList: true, subtree: true });
            });
        }

        microformat = await get_video_microformat();

        html5_main_video.addEventListener('timeupdate', update_text_info_value);
        html5_main_video.addEventListener('volumechange', update_tooltip_text);
        html5_main_video.addEventListener('wheel', change_volume_on_wheel);

        Waitting.body('.ytp-tooltip-text-wrapper').then((e) => {new MutationObserver(update_tooltip_text).observe(e, { attributes: true, subtree: true });});

    }
    catch (e) {
        console.log(e);
    }
}

class Formatter {
    static abbr = {
        week: { Sun: '日', Mon: '一', Tue: '二', Wed: '三', Thu: '四', Fri: '五', Sat: '六' },
        month: { Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06', Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12' },
    }
    static two_digits(number) {
        return number.toString().padStart(2, '0');
    }
    static time_from_seconds(seconds) {
        const [s, m, h] = [seconds % 60, (seconds / 60) % 60, seconds / 3600].map((e) => Math.floor(e));
        return h > 0 ? `${h}:${this.two_digits(m)}:${this.two_digits(s)}` : `${m}:${this.two_digits(s)}`;
    }
    static date(start_date, seconds) {
        const present_time = new Date((start_date ? Date.parse(start_date) : 0) + Math.floor(seconds * 1000));
        const [week, month, day, year, time] = present_time.toString().split(' ');
        return `${year}/${this.abbr.month[month]}/${day} (${this.abbr.week[week]}) ${time}`;
    }
    static time_to_seconds(time) {
        const [s, m, h] = time.split(':').reverse().map((e) => Math.abs(Number(e)));
        const seconds = s + (m || 0) * 60 + (h || 0) * 3600;
        return time[0] == '-' ? -seconds : seconds;
    }
}

class Waitting {
    static head(selector) {
        print(`Watting.head('${selector}');`);
        return this.promise(selector, document.head);
    }
    static body(selector) {
        print(`Watting.body('${selector}');`);
        return this.promise(selector, document.body);
    }
    static promise(selector, observe) {
        return new Promise((resolve) => {
            const observer = new MutationObserver(() => {
                const e = document.querySelector(selector);
                if (e) {
                    observer.disconnect();
                    resolve(e);
                }
            });
            observer.observe(observe, { attributes: false, childList: true, subtree: true });
        });
    }
}

if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
    document.addEventListener('yt-navigate-finish', main);
}
else if (location.href.includes('https://www.youtube.com/embed/') && location.href.includes('holodex.net')) {
    main();
}
else if (location.href.split('/').length == 5 && !location.href.includes('?')) {
    main();
}
else {
    console.log("--------------------------------------------------");
    console.log(location.href)
    console.log("--------------------------------------------------");
}
