// ==UserScript==
// @name        Youtube Live Clock
// @namespace   Violentmonkey Scripts
// @match       https://www.youtube.com/*
// @match       https://www.youtube.com/watch?v=*
// @match       https://www.youtube.com/live/*
// @match       https://www.youtube.com/embed/*
// @grant       none
// @version     1.0.1
// @author      Nekone
// @description 2024/6/3 下午3:47:05
// @icon        https://www.google.com/s2/favicons?sz=64&domain=youtube.com
// ==/UserScript==

'use strict'

const css_video = `

.ytp-pause-overlay {
    display: none !important;
}

.ytp-tooltip-text {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    white-space: pre-line !important;
    line-height: 1.3 !important;
}

.ytp-time-on-control {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    line-height: 1.3 !important;
}

.ytp-time-on-video {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black !important;
    font-size: 14px !important;
    position: absolute !important;
    color: #FFFFFF !important;
    line-height: 1.3 !important;
}

`;

function add_style(css) {
    const style = document.createElement('style');
    style.setAttribute('id', 'live-clock');
    style.textContent = css;
    document.head.appendChild(style);
}

let microformat = null;
let element_on_controller = null;
let element_on_video = null;

let html5_video_player = null;
let html5_main_video = null;
let ytd_watch_info_text = null;

function wait_element(selector) {
    return new Promise((resolve) => {
        const observer = new MutationObserver(() => {
            const e = document.querySelector(selector);
            if (e) {
                observer.disconnect();
                resolve(e);
            }
        });
        observer.observe(document.body, { attributes: false, childList: true, subtree: true });
    });
}

function create_span(selector) {
    let element = document.querySelector(`.${selector}`);
    if (!element) {
        element = document.createElement('span');
        element.setAttribute('class', selector);
    }
    return element;
}

function convert_rewind_time(rewind_time) {
    const [s, m, h] = rewind_time.split(':').reverse().map((e) => Math.abs(Number(e)));
    const total_seconds = s + (m || 0) * 60 + (h || 0) * 3600;
    return rewind_time[0] == '-' ? -total_seconds : total_seconds;
}

function update_tooltip_text() {
    const ytp_tooltip_text = document.querySelector('.ytp-tooltip-text-wrapper .ytp-tooltip-text');
    if (ytp_tooltip_text) {
        const textContent = ytp_tooltip_text.textContent;
        if (textContent.includes(':') && !['(', ')'].some(e => textContent.includes(e))) {
            const rewind_time = convert_rewind_time(textContent);
            const start_date = microformat?.publication?.[0]?.startDate || microformat.uploadDate;
            if (rewind_time > 0) {
                ytp_tooltip_text.textContent = `${textContent} / ${microformat.duration}\n` + Formatter.date(start_date, rewind_time);
            }
            else {
                const secondsFromStart = Math.floor((Date.now() - Date.parse(start_date)) / 1000) + rewind_time;
                ytp_tooltip_text.textContent = `${Formatter.time(secondsFromStart)} / ${textContent}\n` + Formatter.date(start_date, secondsFromStart);
            }
        }
        else if (['音量', '%'].some(e => textContent.includes(e))) {
            ytp_tooltip_text.textContent = `${html5_video_player.getVolume()}%`;
        }
    }
}

let text_info = {
    'time-current': '',
    'time-duration': '',
    'status-live-latency': '',
    'status-buffer-health': '',
    'status-view-count': '',
    'time-date': '',
    'time-now': '',
    'playbackrate-volume-quality':'',
}
function update_text_info() {
    const current_time = html5_main_video.currentTime;
    const start_date = microformat?.publication?.[0]?.startDate || microformat.uploadDate;

    const video_stats = Object.assign({}, html5_video_player.getStatsForNerds(), html5_video_player.getVideoStats());
    const live_latency = video_stats['live_latency_secs'];
    const buffer_health = video_stats['buffer_health_seconds'];
    const video_format = video_stats['optimal_format'];

    const volume = html5_video_player.getVolume();
    const playbackrate = html5_main_video.playbackRate.toFixed(2);
    const view_count = live_latency ? ytd_watch_info_text?.viewCountProps?.numberText : (Number(microformat.interactionCount) || '').toLocaleString();

    text_info['time-current'] = Formatter.time(current_time);
    text_info['time-duration'] = !live_latency ? ` / ${microformat.duration}` : '';
    text_info['status-live-latency'] = live_latency ? `(L/${live_latency})` : '';
    text_info['status-buffer-health'] = buffer_health ? `(B/${buffer_health})` : '';
    text_info['status-view-count'] = view_count ? `(V/${view_count})` : '';
    text_info['time-date'] = live_latency ? Formatter.date(null, html5_video_player.getMediaReferenceTime()) : Formatter.date(start_date, current_time);
    text_info['time-now'] = `[${Date().toString().split(' ')[4]}]`; // ['Fri', 'Jun', '21', '2024', '21:49:06', 'GMT+0800', '(台北標準時間)']
    text_info['playbackrate-volume-quality'] = `(${playbackrate}x/${volume}%/${video_format})`;

    if (element_on_controller) element_on_controller.textContent = `${text_info['time-current']}${text_info['time-duration']} ${text_info['time-date']}`;
    if (element_on_video) element_on_video.textContent = Object.values(text_info).join(' ');
}


async function get_video_microformat() {
    try {
        if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
            const microformat_script = await wait_element('#microformat script');
            return JSON.parse(microformat_script.textContent);
        }
        else if (location.href.includes('https://www.youtube.com/embed/')) {
            // For test
            // const player_microformat_renderer = {"thumbnail":{"thumbnails":[{"url":"https://i.ytimg.com/vi/uR_MfCykUqk/maxresdefault.jpg","width":1280,"height":720}]},"embed":{"iframeUrl":"https://www.youtube.com/embed/uR_MfCykUqk","width":1280,"height":720},"title":{"simpleText":"【Girls' Frontline 2: Exilium】"},"description":{"simpleText":"#GirlsFrontline2Exilium #GFL2EXILIUM"},"lengthSeconds":"261","ownerProfileUrl":"http://www.youtube.com/@Nekone0405","externalChannelId":"UCSjn4tVXo_tuGHRsrH2RGMQ","isFamilySafe":true,"availableCountries":["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"],"isUnlisted":true,"hasYpcMetadata":false,"viewCount":"8","category":"Gaming","publishDate":"2025-01-25T22:03:29-08:00","ownerChannelName":"Wei","uploadDate":"2025-01-25T22:03:29-08:00","isShortsEligible":false};

            const ytp_title_link = await wait_element('.ytp-title-link');
            const video_id = ytp_title_link.href.split('/watch?v=').pop();
            const response = await fetch('https://www.youtube.com/youtubei/v1/player?prettyPrint=false', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ context: { client: { clientName: 'WEB', clientVersion: '2.20240821.01.00' } }, video_id: video_id }),
            });
            if (!response.ok) {
                throw new Error(`[fetch] response.status = ${response.status}`);
            }
            const player_microformat_renderer = (await response.json()).microformat.playerMicroformatRenderer;

            return {
                "duration": `PT${player_microformat_renderer.lengthSeconds}S`,
                "interactionCount": player_microformat_renderer.viewCount,
                "name": player_microformat_renderer.title.simpleText,
                "thumbnailUrl": [ player_microformat_renderer.thumbnail.thumbnails?.[0].url ],
                "uploadDate": player_microformat_renderer.uploadDate,
                "publication": [
                    {
                        "startDate": player_microformat_renderer?.liveBroadcastDetails?.startTimestamp,
                        "endDate": player_microformat_renderer?.liveBroadcastDetails?.endTimestamp,
                    }
                ]
            };
        }
    }
    catch (e) {
        console.log(e);
    }
}

let timeoutid = null
function change_volume_on_wheel(e) {
    const onYTLSTM = document.querySelector('body[data-ytlstm-theater-mode]')
    if (onYTLSTM || location.href.includes('https://www.youtube.com/embed/')) {
        const volume = html5_video_player.getVolume() + (10 - 5 * e.shiftKey) * (e.deltaY < 0 ? 1 : -1);
        if (volume <= 0) {
            html5_video_player.setVolume(0);
            html5_video_player.mute();
        }
        else {
            html5_video_player.setVolume(volume);
            html5_video_player.unMute();
        }

        const ytpBezel = document.querySelector('.ytp-bezel');
        const ytpBezelText = document.querySelector('.ytp-bezel-text');
        if (ytpBezelText && ytpBezel) {
            ytpBezelText.textContent = `${html5_video_player.getVolume()}%`;
            ytpBezelText.parentElement.parentElement.setAttribute('class', '');
            ytpBezelText.parentElement.parentElement.style.display = '';
            ytpBezel.style.display = 'none';
            clearTimeout(timeoutid);
            timeoutid = setTimeout(() => {
                ytpBezelText.parentElement.parentElement.style.display = 'none';
                ytpBezel.style.display = '';
            }, 500);
        }
    }
}

function change_clock_on_video_bottom() {
    const video_height = html5_main_video.offsetHeight;
    const video_left = html5_main_video.offsetLeft;
    const video_top = html5_main_video.offsetTop;
    const text_height = element_on_video.getBoundingClientRect().height;
    element_on_video.style.left = `${video_left + 2}px`;
    element_on_video.style.top = `${video_height + video_top - text_height + (video_top < text_height ? video_top : text_height + 2)}px`;
}

async function main() {
    try {
        add_style(css_video);

        microformat = await get_video_microformat();

        element_on_controller = create_span('ytp-time-on-control');
        const ytp_time_wrapper = await wait_element('.ytp-time-wrapper');
        ytp_time_wrapper.appendChild(element_on_controller);

        const ytp_time_current = await wait_element('.ytp-time-current');
        const ytp_time_separator = await wait_element('.ytp-time-separator');
        const ytp_time_duration = await wait_element('.ytp-time-duration');
        [ytp_time_current, ytp_time_separator, ytp_time_duration].forEach((e) => { e.style.display = 'none' });
        microformat.duration = ytp_time_duration.textContent;

        html5_video_player = await wait_element('.html5-video-player');

        element_on_video = create_span('ytp-time-on-video');
        element_on_video.textContent = '( ^)o(^ )';
        html5_main_video = await wait_element('.html5-main-video');
        html5_main_video.after(element_on_video);
        new MutationObserver(change_clock_on_video_bottom).observe(html5_main_video, { attributes: true });

        if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
            ytd_watch_info_text = await wait_element('#ytd-watch-info-text');
        }

        html5_main_video.addEventListener('timeupdate', update_text_info, { passive: true });
        html5_main_video.addEventListener('volumechange', update_tooltip_text, { passive: true });
        html5_main_video.addEventListener('wheel', change_volume_on_wheel, { passive: true });

        const ytp_tooltip_text_wrapper = await wait_element('.ytp-tooltip-text-wrapper');
        new MutationObserver(update_tooltip_text).observe(ytp_tooltip_text_wrapper, { attributes: true, subtree: true });
    }
    catch (e) {
        console.log(e);
    }
}

if (['/watch?v=', '/live/'].some(e => location.href.includes(e))) {
    document.addEventListener('yt-navigate-finish', main, { once: true });
}
else if (location.href.includes('https://www.youtube.com/embed/')) {
    main();
}
else {
    console.log("--------------------------------------------------");
    console.log(location.href)
    console.log("--------------------------------------------------");
}

class Formatter {
    static abbr = {
        week: { Sun: '日', Mon: '一', Tue: '二', Wed: '三', Thu: '四', Fri: '五', Sat: '六' },
        month: { Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06', Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12' },
    }
    static two_digits(number) {
        return number.toString().padStart(2, '0');
    }
    static time(seconds) {
        const [s, m, h] = [seconds % 60, (seconds / 60) % 60, seconds / 3600].map((e) => Math.floor(e));
        return h > 0 ? `${h}:${this.two_digits(m)}:${this.two_digits(s)}` : `${m}:${this.two_digits(s)}`;
    }
    static date(start_date, seconds) {
        const present_time = new Date((start_date ? Date.parse(start_date) : 0) + Math.floor(seconds * 1000));
        const [week, month, day, year, time] = present_time.toString().split(' ');
        return ` (${year}/${this.abbr.month[month]}/${day} (${this.abbr.week[week]}) ${time})`;
    }
}

