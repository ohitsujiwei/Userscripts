// ==UserScript==
// @name        Twitter Media Downloader V3
// @description Violentmonkey Scripts
// @version     3.1.10
// @author      Nekone
// @match       https://x.com/*
// @match       https://twitter.com/*
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_download
// @grant       GM_addStyle
// @icon        https://www.google.com/s2/favicons?sz=64&domain=twitter.com
// @run-at      document-start
// ==/UserScript==

'use strict';

// TODO: (Lazy to do.)
// - 'HomeTimeline'                 for https://x.com/home with recommend
// - 'HomeLatestTimeline'           for https://x.com/home with following
// - 'ListLatestTweetsTimeline'     for https://x.com/home with list
//                                  and https://x.com/i/lists/*
// - 'Bookmarks'                    for https://x.com/i/bookmarks
//
// Not necessary:
// - 'CommunitiesExploreTimeline'   for https://x.com/i/bookmarks
//
// Done:
// - 'UserTweets'           for https://x.com/{user}        (2025/05/18)
// - 'device_follow.json'   for https://x.com/i/timeline    (2025/05/13)
// - 'TweetDetail'          for https://x.com/*/status/*    (2025/05/13)
// - 'UserMedia'            for https://x.com/*/media       (2025/05/13)

GM_addStyle(`

/* img radius */
.r-1867qdf {
    border-radius: unset !important;
`)

const filename = '{user-id}-{status-id}';

const xhr_keywords = {
    api: [
        'HomeTimeline',
        'UserTweets',
        'device_follow.json',
        'TweetDetail',
        'UserMedia',
    ]
}

let data_items_li = [];
let data_items_article = [];

function get_tweet_response_data(response) {
    const json = JSON.parse(response.responseText);
    const api = response.responseURL.split('?').shift().split('/').pop();
    console.debug(response);
    console.debug(api);
    console.debug(json);
    switch (api) {
        case 'HomeTimeline': {
            json.data.home.home_timeline_urt.instructions.forEach((instruction) => {
                if (instruction.type === 'TimelineAddEntries') {
                    data_items_article = data_items_article.concat(instruction.entries.map(e => e.content.itemContent?.tweet_results.result).filter(e => e));
                }
            });
            break;
        }
        case 'UserTweets': {
            json.data.user.result.timeline.timeline.instructions.forEach((instruction) => {
                if (instruction.type === 'TimelinePinEntry') {
                    data_items_article.push(instruction.entry.content.itemContent.tweet_results.result);
                }
                else if (instruction.type === 'TimelineAddEntries') {
                    const entries = instruction.entries.filter(e => e.entryId.includes('tweet-'));
                    data_items_article = data_items_article.concat(entries.map(e => e.content.itemContent.tweet_results.result));
                }
            });
            break;
        }
        case 'device_follow.json': {
            Object.entries(json.globalObjects.tweets).forEach(([key, value]) => {
                data_items_article.push({
                    rest_id: key,
                    legacy: value,
                    core: { user_results: { result: { legacy: json.globalObjects.users[value.user_id_str], }, }, },
                });
            });
            break;
        }
        case 'TweetDetail': {
            json.data.threaded_conversation_with_injections_v2.instructions.find(e => e.type === "TimelineAddEntries").entries.forEach((entry) => {
                if (entry.entryId.includes('tweet-')) {
                    // '1924090576238260657' -> entry.content.itemContent.tweet_results.result.tweet
                    data_items_article.push(entry.content.itemContent.tweet_results.result.tweet || entry.content.itemContent.tweet_results.result);
                }
                else if (entry.entryId.includes('conversationthread-')) {
                    entry.content.items.forEach((item) => {
                        if (item.entryId.includes('tweet-')) {
                            data_items_article.push(item.item.itemContent.tweet_results.result);
                        }
                    });
                }
            });
            break;
        }
        case 'UserMedia': {
            json.data.user.result.timeline.timeline.instructions.forEach((instruction) => {
                if (instruction.type === 'TimelineAddEntries') {
                    const entries = instruction.entries.find(e => e.entryId.includes('profile-grid'));
                    if (entries) data_items_li = data_items_li.concat(entries.content.items.map(e => e.item.itemContent.tweet_results.result));
                }
                else if (instruction.type === 'TimelineAddToModule') {
                    data_items_li = data_items_li.concat(instruction.moduleItems.map(e => e.item.itemContent.tweet_results.result));
                }
            });
            break;
        }
    }
    console.debug('data_items_article', data_items_article);
    console.debug('data_items_li', data_items_li);
}

(function override_xhr_send() {
    const original_send = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function(body) {
        this.addEventListener('readystatechange', () => {
            if (this.readyState === 4 && xhr_keywords.api.some(e => this.responseURL.includes(e))) {
                get_tweet_response_data(this);
            }
        });
        return original_send.apply(this, arguments);
    };
})();


class TwitterMediaDownloader {
    constructor() {
        this.selector = {
            download_button_common: 'tmd-down',
            download_button_media_tab: 'tmd-media',
            download_button_photo: 'tmd-img',
            download_status_notifier: 'tmd-notifier',
        };
this.selector.download_button_photo

        this.css = (() => {
            return `
.${this.selector.download_button_common} {margin-left: 12px; order: 99;}
.${this.selector.download_button_common}:hover > div > div > div > div {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}:hover > div > div > div > div > div {background-color: rgba(29, 161, 242, 0.1);}
.${this.selector.download_button_common}:active > div > div > div > div > div {background-color: rgba(29, 161, 242, 0.2);}
.${this.selector.download_button_common}:hover svg {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}:hover div:first-child:not(:last-child) {background-color: rgba(29, 161, 242, 0.1);}
.${this.selector.download_button_common}:active div:first-child:not(:last-child) {background-color: rgba(29, 161, 242, 0.2);}

.${this.selector.download_button_common}.${this.selector.download_button_media_tab} {position: absolute; right: 0;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab} > div {display: flex; border-radius: 99px; margin: 2px;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab} > div > div {display: flex; margin: 6px; color: #fff;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:hover > div {background-color: rgba(255,255,255, 0.6);}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:hover > div > div {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:not(:hover) > div > div {filter: drop-shadow(0 0 1px #000);}

.${this.selector.download_button_common} g {display: none;}

.${this.selector.download_button_common}.download g.download,
.${this.selector.download_button_common}.completed g.completed,
.${this.selector.download_button_common}.loading g.loading,
.${this.selector.download_button_common}.failed g.failed {display: unset;}

.${this.selector.download_button_common}.loading svg {animation: spin 1s linear infinite;}

@keyframes spin {0% {transform: rotate(0deg);} 100% {transform: rotate(360deg);}}
.tmd-btn {display: inline-block; background-color: #1DA1F2; color: #FFFFFF; padding: 0 20px; border-radius: 99px;}
.tmd-tag {display: inline-block; background-color: #FFFFFF; color: #1DA1F2; padding: 0 10px; border-radius: 10px; border: 1px solid #1DA1F2;  font-weight: bold; margin: 5px;}
.tmd-btn:hover {background-color: rgba(29, 161, 242, 0.9);}
.tmd-tag:hover {background-color: rgba(29, 161, 242, 0.1);}

.tmd-notifier {display: none; position: fixed; left: 16px; bottom: 16px; color: #000; background: #fff; border: 1px solid #ccc; border-radius: 8px; padding: 4px;}
.tmd-notifier.running {display: flex; align-items: center;}
.tmd-notifier label {display: inline-flex; align-items: center; margin: 0 8px;}
.tmd-notifier label:before {content: " "; width: 32px; height: 16px; background-position: center; background-repeat: no-repeat;}
.tmd-notifier label:nth-child(1):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l4,4 q1,1 2,0 l4,-4 M12,3 v11%22 fill=%22none%22 stroke=%22%23666%22 stroke-width=%222%22 stroke-linecap=%22round%22 /></svg>");}
.tmd-notifier label:nth-child(2):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M12,2 a1,1 0 0 1 0,20 a1,1 0 0 1 0,-20 M12,5 v7 h6%22 fill=%22none%22 stroke=%22%23999%22 stroke-width=%222%22 stroke-linejoin=%22round%22 stroke-linecap=%22round%22 /></svg>");}
.tmd-notifier label:nth-child(3):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M12,0 a2,2 0 0 0 0,24 a2,2 0 0 0 0,-24%22 fill=%22%23f66%22 stroke=%22none%22 /><path d=%22M14.5,5 a1,1 0 0 0 -5,0 l0.5,9 a1,1 0 0 0 4,0 z M12,17 a2,2 0 0 0 0,5 a2,2 0 0 0 0,-5%22 fill=%22%23fff%22 stroke=%22none%22 /></svg>");}

.${this.selector.download_button_common}.${this.selector.download_button_photo} {position: absolute; right: 0; bottom: 0; display: none !important;}
.${this.selector.download_button_common}.${this.selector.download_button_photo} > div {display: flex; border-radius: 99px; margin: 2px; background-color: rgba(255,255,255, 0.6);}
.${this.selector.download_button_common}.${this.selector.download_button_photo} > div > div {display: flex; margin: 6px; color: #fff !important;}
.${this.selector.download_button_common}.${this.selector.download_button_photo}:not(:hover) > div > div {filter: drop-shadow(0 0 1px #000);}
.${this.selector.download_button_common}.${this.selector.download_button_photo}:hover > div > div {color: rgba(29, 161, 242, 1.0);}

:hover > .${this.selector.download_button_common}.${this.selector.download_button_photo},
.${this.selector.download_button_photo}.loading,
.${this.selector.download_button_photo}.completed,
.${this.selector.download_button_photo}.failed {display: block !important;}

.tweet-detail-action-item {width: 20% !important;}
    `;
        })();
        document.head.insertAdjacentHTML('beforeend', '<style id="tmd">' + this.css + '</style>');

        this.download_button_svg = (() => {
            return `
<g class="download"><path d="M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l4,4 q1,1 2,0 l4,-4 M12,3 v11" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" /></g>
<g class="completed"><path d="M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l3,4 q1,1 2,0 l8,-11" fill="none" stroke="#1DA1F2" stroke-width="2" stroke-linecap="round" /></g>
<g class="loading"><circle cx="12" cy="12" r="10" fill="none" stroke="#1DA1F2" stroke-width="4" opacity="0.4" /><path d="M12,2 a10,10 0 0 1 10,10" fill="none" stroke="#1DA1F2" stroke-width="4" stroke-linecap="round" /></g>
<g class="failed"><circle cx="12" cy="12" r="11" fill="#f33" stroke="currentColor" stroke-width="2" opacity="0.8" /><path d="M14,5 a1,1 0 0 0 -4,0 l0.5,9.5 a1.5,1.5 0 0 0 3,0 z M12,17 a2,2 0 0 0 0,4 a2,2 0 0 0 0,-4" fill="#fff" stroke="none" /></g>
`;
        })();
        this.download_button_status = {
            download: 'download',
            completed: 'completed',
            loading: 'loading',
            failed: 'failed',
        }
        this.download_button_title = (() => {
            const language = { 'en': {}, 'zh-Hant': {}, };
            language['en'][this.download_button_status.download] = 'Download';
            language['en'][this.download_button_status.completed] = 'Download Completed';
            language['en'][this.download_button_status.loading] = 'Downloading...';
            language['en'][this.download_button_status.failed] = 'Download Failed';
            language['zh-Hant'][this.download_button_status.download] = '下載';
            language['zh-Hant'][this.download_button_status.completed] = '下載完成';
            language['zh-Hant'][this.download_button_status.loading] = '下載中...';
            language['zh-Hant'][this.download_button_status.failed] = '下載失敗';
            return language[document.querySelector('html').lang || navigator.language || 'en'];
        })();

        this.download_history = null;
        this.update_download_history();

        this.invalid_chars = {
            '\\': '＼',
            '\/': '／',
            '\|': '｜',
            '<': '＜',
            '>': '＞',
            ':': '：',
            '*': '＊',
            '?': '？',
            '"': '＂',
            '\u200b': '',
            '\u200c': '',
            '\u200d': '',
            '\u2060': '',
            '\ufeff': '',
            '🔞': ''
        };
        this.downloader = this.create_downloader();

        this.time_split = '·';
        this.pixiv_html = (() => {
            return `
<div id="pixiv-container" style="display: flex; flex-direction: column; flex: 0 1 auto; padding: 0px 10px;">
    <div style="display: flex; flex: 0 1 auto; padding-bottom: 4px;">
        <span id="pixiv-input-title" style="display: flex; font-family: Segoe UI; padding-right: 4px; flex: 0 2 auto; width: 100%;">Pixiv ID</span>
        <input id="pixiv-input" type="text" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; width: 100%; background: #404040; border: #FFFFFF solid 1px;">
    </div>
    <input id="pixiv-button" type="button" value="GM_setValue" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; background: #404040; border: #FFFFFF solid 1px;">
    <div style="display: flex; flex: 0 1 auto;">
        <span id="pixiv-result" style="display: flex; font-family: Segoe UI; flex: 0 1 auto;"></span>
        <a id="pixiv-link" target="_blank" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; color: #1D9BF0; text-decoration: underline;"></a>
    </div>
</div>`
        })();

        this.observer_document();
        console.debug(this);
    }

    update_download_history(status_id) {
        const history = GM_getValue('download_history', []);
        if (status_id && !history.includes(status_id)) {
            history.push(status_id);
            GM_setValue('download_history', history);
        }
        this.download_history = history;
    }

    create_download_button_on_image(type, status) {
        const button = document.createElement('div');
        button.innerHTML = '<div><div><svg viewBox="0 0 24 24" style="width: 18px; height: 18px;">' + this.download_button_svg + '</svg></div></div>';
        button.classList.add(this.selector.download_button_common);
        if (type) button.classList.add(type);
        this.update_download_button(button, status ? status : this.download_button_status.download);
        return button;
    }

    update_download_button(button, status) {
        if (status) {
            button.classList.remove(...Object.values(this.download_button_status));
            button.classList.add(this.download_button_status[status]);
            button.title = this.download_button_title[this.download_button_status[status]];
        }
    }

    format_date (time_string, output, change_to_timezone) {
        const date = new Date(time_string);
        if (change_to_timezone) date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        const month = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        const result = {
            YYYY: date.getUTCFullYear().toString(),
            YY: date.getUTCFullYear().toString(),
            MM: date.getUTCMonth() + 1,
            MMM: month[date.getUTCMonth()],
            DD: date.getUTCDate(),
            hh: date.getUTCHours(),
            mm: date.getUTCMinutes(),
            ss: date.getUTCSeconds(),
            h2: date.getUTCHours() % 12,
            ap: date.getUTCHours() < 12 ? 'AM' : 'PM'
        };
        return output.replace(/(YY(YY)?|MMM?|DD|hh|mm|ss|h2|ap)/g, n => ('0' + result[n]).substr(-n.length));
    }

    onclick_download_button(button, status_id, index, data) {
        // console.debug(button);
        // console.debug(status_id);
        // console.debug(index);
        // console.debug(data);
        if (!data) {
            this.update_download_button(button, this.download_button_status.failed);
            return;
        }

        if (button.classList.contains(this.download_button_status.loading)) return;
        this.update_download_button(button, this.download_button_status.loading);


        const out = GM_getValue('filename', filename).split('\n').join(''); // save_filename
        const tweet = data.legacy;
        const datetime = out.match(/{date-time(-local)?:[^{}]+}/) ? out.match(/{date-time(?:-local)?:([^{}]+)}/)[1].replace(/[\\/|<>*?:"]/g, v => this.invalid_chars[v]) : 'YYYYMMDD-hhmmss';
        const info = {};
        info['user-name'] = data.core.user_results.result.core.name.replace(/([\\/|*?:"]|[\u200b-\u200d\u2060\ufeff]|🔞)/g, v => this.invalid_chars[v]);
        info['user-id'] = data.core.user_results.result.core.screen_name;
        info['status-id'] = status_id;
        info['date-time'] = this.format_date(tweet.created_at, datetime);
        info['date-time-local'] = this.format_date(tweet.created_at, datetime, true);
        info['full-text'] = tweet.full_text.split('\n').join(' ').replace(/\s*https:\/\/t\.co\/\w+/g, '').replace(/[\\/|<>*?:"]|[\u200b-\u200d\u2060\ufeff]/g, v => this.invalid_chars[v]);

        let medias = tweet.extended_entities && tweet.extended_entities.media;
        if (index) medias = [medias[index - 1]];

        if (medias.length > 0) {
            let tasks = medias.length;
            const tasks_result = [];
            medias.forEach((media, i) => {
                info.url = media.type == 'photo' ? `${media.media_url_https}:orig` : media.video_info.variants.filter(n => n.content_type == 'video/mp4').sort((a, b) => b.bitrate - a.bitrate)[0].url;
                info.file = info.url.split('/').pop().split(/[:?]/).shift();
                info['file-name'] = info.file.split('.').shift();
                info['file-ext'] = info.file.split('.').pop();
                info['file-type'] = media.type.replace('animated_', '');
                info.out = (out.replace(/\.?{file-ext}/, '') + ((medias.length > 1 || index) && !out.match('{file-name}') ? '-' + (index ? index - 1 : i) : '') + '.{file-ext}').replace(/{([^{}:]+)(:[^{}]+)?}/g, (match, name) => info[name]);

                this.downloader.add({
                    url: info.url,
                    name: info.out,
                    onload: () => {
                        tasks -= 1;
                        tasks_result.push(((medias.length > 1 || index) ? (index ? index : i + 1) + ': ' : '') + this.download_button_title[this.download_button_status.completed]);
                        this.update_download_button(button, null, tasks_result.sort().join('\n'));
                        if (tasks === 0) {
                            this.update_download_button(button, this.download_button_status.completed);
                            this.update_download_history(status_id);
                        }
                    },
                    onerror: result => {
                        tasks = -1;
                        tasks_result.push((medias.length > 1 ? i + 1 + ': ' : '') + result.details.current);
                        this.update_download_button(button, this.download_button_status.failed, tasks_result.sort().join('\n'));
                    }
                });

            });
        }
        else {
            this.update_download_button(button, this.download_button_status.failed);
        }
    }

    create_downloader() {
        let tasks = [], thread = 0, max_thread = 2, retry = 0, max_retry = 2, failed = 0, notifier, has_failed = false;
        return {
            add: function (task) {
                tasks.push(task);
                if (thread < max_thread) {
                    thread += 1;
                    this.next();
                } else this.update();
            },
            next: async function () {
                let task = tasks.shift();
                await this.start(task);
                if (tasks.length > 0 && thread <= max_thread) this.next();
                else thread -= 1;
                this.update();
            },
            start: function (task) {
                this.update();
                return new Promise(resolve => {
                    GM_download({
                        url: task.url,
                        name: task.name,
                        onload: result => {
                            task.onload();
                            resolve();
                        },
                        onerror: result => {
                            this.retry(task, result);
                            resolve();
                        },
                        ontimeout: result => {
                            this.retry(task, result);
                            resolve();
                        }
                    });
                });
            },
            retry: function (task, result) {
                retry += 1;
                if (retry == 3) max_thread = 1;
                if (task.retry && task.retry >= max_retry ||
                    result.details && result.details.current == 'USER_CANCELED') {
                    task.onerror(result);
                    failed += 1;
                } else {
                    if (max_thread == 1) task.retry = (task.retry || 0) + 1;
                    this.add(task);
                }
            },
            update: function () {
                if (!notifier) {
                    notifier = document.createElement('div');
                    notifier.title = 'Twitter Media Downloader';
                    notifier.classList.add(`tmd-notifier`);
                    notifier.innerHTML = '<label>0</label>|<label>0</label>';
                    document.body.appendChild(notifier);
                }
                if (failed > 0 && !has_failed) {
                    has_failed = true;
                    notifier.innerHTML += '|';
                    let clear = document.createElement('label');
                    notifier.appendChild(clear);
                    clear.onclick = () => {
                        notifier.innerHTML = '<label>0</label>|<label>0</label>';
                        failed = 0;
                        has_failed = false;
                        this.update();
                    };
                }
                notifier.firstChild.innerText = thread;
                notifier.firstChild.nextElementSibling.innerText = tasks.length;
                if (failed > 0) notifier.lastChild.innerText = failed;
                if (thread > 0 || tasks.length > 0 || failed > 0) notifier.classList.add('running');
                else notifier.classList.remove('running');
            }
        };
    }

    add_to_article_photo_download_button(node) {
        if (!node.src.includes('/media/')) return;

        if (!node.closest('article')) return;

        const photo = node.closest('a[href*="/photo/"]');
        if (!photo) return;

        if (photo.parentNode.querySelector(`.${this.selector.download_button_common}`)) return;

        const [status_id, index] = photo.href.split('/status/').pop().split('/photo/');

        const button = this.create_download_button_on_image(this.selector.download_button_photo, this.download_button_status.download);
        photo.parentNode.appendChild(button);
        button.onclick = (e) => {
            e.preventDefault();
            this.onclick_download_button(button, status_id, index, data_items_article.find(e => e.rest_id === status_id || e.id_str === status_id));
        }
    }

    add_to_media_tab_download_button(node) {
        const li = node.closest(`li[role="listitem"][id*="verticalGridItem"]:not(:has(.${this.selector.download_button_media_tab}))`);
        if (!li) return;

        const status_id = li.querySelector('a[href*="/status/"]')?.href.split('/status/').pop().split('/').shift();
        const index = null;

        const button_status = this.download_history.includes(status_id) ? this.download_button_status.completed : this.download_button_status.download;
        const button = this.create_download_button_on_image(this.selector.download_button_media_tab, button_status);
        button.onclick = () => this.onclick_download_button(button, status_id, index, data_items_li.find(e => e.rest_id === status_id));
        li.appendChild(button);
    }

    add_to_article_download_button(node) {
        const article = node.closest('article');
        if (!article) return;

        if (article.querySelector(`.${this.selector.download_button_common}`)) return;

        const media = article.querySelector('a[href*="/photo/"], [aria-label*="語音貼文"], [aria-label*="嵌入的影片"]');
        if (!media) return;

        const time = Array.from(article.querySelectorAll('time')).pop();
        const status_id = time.closest('a')?.href.split('/status/').pop().split('/').shift();
        if (!status_id) return;

        if (media.tagName == 'A') {
            const image_status_id = media.href.split('/status/').pop().split('/').shift();
            if (image_status_id != status_id) return;
        }

        const button_group = article.querySelector('div[role="group"]');
        const button_download = button_group.lastChild.cloneNode(true);
        button_download.querySelector('svg').innerHTML = this.download_button_svg;
        const button_status = this.download_history.includes(status_id) ? this.download_button_status.completed : this.download_button_status.download;
        button_download.classList.add(this.selector.download_button_common);
        this.update_download_button(button_download, button_status);
        button_group.appendChild(button_download);
        button_download.onclick = () => this.onclick_download_button(button_download, status_id, null, data_items_article.find(e => e.rest_id === status_id));
    }

    add_to_article_time(node) {
        if (!node.src.includes('/profile_images/')) return;

        const article = node.closest('article:has(time)');
        if (!article) return;

        article.querySelectorAll('time:not([time-added]').forEach((time) => {
            const date = new Date(time.dateTime);
            if (isNaN(date)) return;

            time.setAttribute('time-added', '');
            if (time.textContent.includes(this.time_split)) {
                time.textContent = [new Date(time.dateTime).toLocaleTimeString(), ...time.textContent.split(' ').slice(1, 3)].join(' ');
            }
            else {
                time.textContent = `${time.textContent} ${this.time_split} ${new Date(time.dateTime).toLocaleString('zh-tw', { hourCycle:'h24' })}`;
            }

        });
    }

    add_to_article_pixiv(node) {
        if (!node.src.includes('/media/')) return;

        const article = node.closest('article:has(time)');
        if (!article) return;

        const time = article.querySelector('time:not([pixiv-added])');
        if (!time) return;

        if (article.querySelector('img[src*="/media/"]')) {
            const a = time.closest('a');
            if (!a) return;
            const pixiv_id = this.get_pixiv_id(a.href);
            if (pixiv_id) {
                const parent = a?.parentElement.parentElement;
                if (parent) {
                    time.setAttribute('pixiv-added', '');
                    parent.appendChild(parent.childNodes[1].cloneNode(true));
                    const pixiv_element = document.createElement('a');
                    parent.appendChild(pixiv_element);
                    pixiv_element.innerHTML = `<a id="pixiv-tweet-link" href="https://www.pixiv.net/users/${pixiv_id}/illustrations" target="_blank" style="font-family: Segoe UI; color: #1D9BF0; text-decoration: underline;">Pixiv</a>`;
                }
            }
        }
    }

    add_to_user_page_pixiv_input(node) {
        if (!node.src.includes('/profile_images/') || !node?.alt.includes('開啟個人資料相片')) return;

        const user_avatar_container = node.closest('div[data-testid*="UserAvatar-Container"]');
        if (!user_avatar_container) return;

        if (document.querySelector('#pixiv_container')) return;

        const pixiv_container = document.createElement('div');
        user_avatar_container.after(pixiv_container);
        user_avatar_container.parentElement.style.flexWrap = 'nowrap';
        pixiv_container.innerHTML = this.pixiv_html;

        const i = pixiv_container.querySelector('#pixiv-input');
        const b = pixiv_container.querySelector('#pixiv-button');
        const l = pixiv_container.querySelector('#pixiv-link');
        const r = pixiv_container.querySelector('#pixiv-result');
        const pixiv_id = this.get_pixiv_id(location.href);
        if (pixiv_id) {
            i.value = pixiv_id;
            i.readOnly = true;
            b.disabled = true;
            l.textContent = `pixiv.net/users/${pixiv_id}`;
            l.href = `https://www.pixiv.net/users/${pixiv_id}/illustrations`;
        }
        b.onclick = () => {
            const pixiv_id_input = i.value;
            if (Number.isInteger(Number(pixiv_id_input)) && pixiv_id_input != '') {
                const pixiv_id_list = GM_getValue('pixiv_id', {});
                const twitter_id = location.href.toLowerCase().split('/')[3];
                pixiv_id_list[twitter_id] = pixiv_id_input;
                GM_setValue('pixiv_id', pixiv_id_list);
                i.readOnly = true;
                b.disabled = true;
                r.textContent = '';
                l.textContent = `pixiv.net/users/${pixiv_id_input}`;
                l.href = `https://www.pixiv.net/users/${pixiv_id_input}/illustrations`;
            }
            else {
                r.textContent = 'NaN';
                l.textContent = '';
                l.href = '';
            }
        }
    }

    get_pixiv_id(twitter_href_or_id) {
        const twitter_id = twitter_href_or_id.includes('http') ? twitter_href_or_id.toLowerCase().split('/')[3] : twitter_href_or_id.toLowerCase();
        return GM_getValue('pixiv_id', {})[twitter_id];
    }

    parsing_node(node) {
        if (node.tagName == 'IMG') {
            this.add_to_article_photo_download_button(node);
            this.add_to_media_tab_download_button(node);
            this.add_to_article_time(node);
            this.add_to_article_pixiv(node);
            this.add_to_user_page_pixiv_input(node);
        }
        else if (node.tagName == 'DIV') {
            this.add_to_article_download_button(node);
        }
    }

    observer_document() {
        const observer = new MutationObserver((array) => { array.forEach((mutation_record) => { mutation_record.addedNodes.forEach((node) => { this.parsing_node(node); }); }); });
        observer.observe(document, { attributes: false, childList: true, subtree: true });
    }
}

new TwitterMediaDownloader();
