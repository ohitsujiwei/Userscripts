// ==UserScript==
// @name        Twitter Media Downloader V3
// @description Violentmonkey Scripts
// @version     3.3.4
// @author      Nekone
// @match       https://x.com/*
// @match       https://twitter.com/*
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_download
// @grant       GM_addStyle
// @icon        https://www.google.com/s2/favicons?sz=64&domain=twitter.com
// @run-at      document-start
// ==/UserScript==

'use strict';

// TODO: (Lazy to do.)
// - 'ListLatestTweetsTimeline'     for https://x.com/home with list
//                                  and https://x.com/i/lists/*
// - 'Bookmarks'                    for https://x.com/i/bookmarks
//
// Not necessary:
// - 'CommunitiesExploreTimeline'   for https://x.com/{user}/communities/explore
//
// Done:
// - 'HomeLatestTimeline'   for https://x.com/home          (2025/05/24) (following)
// - 'HomeTimeline'         for https://x.com/home          (2025/05/24) (recommend)
// - 'UserTweets'           for https://x.com/{user}        (2025/05/18)
// - 'device_follow.json'   for https://x.com/i/timeline    (2025/05/13)
// - 'TweetDetail'          for https://x.com/*/status/*    (2025/05/13)
// - 'UserMedia'            for https://x.com/*/media       (2025/05/13)

GM_addStyle(`

/* img radius */
.r-1867qdf {
    border-radius: unset !important;
`)

const file_name = '{user-id}-{status-id}';

const xhr_api_keywords = [
    'UserByScreenName',
    'HomeLatestTimeline',
    'HomeTimeline',
    'UserTweets',
    'device_follow.json',
    'TweetDetail',
    'UserMedia',
]

const xhr_data_set = {};

function deep_search(object) {
    function search(object) {
        if (!object || typeof object !== 'object') return;
        for (const key in object) {
            if (object[key].rest_id && object[key].legacy) {
                xhr_data_set[object[key].rest_id] = object[key];
            }
            search(object[key]);
        }
    }
    search(object);
}

function get_tweet_response_data(response) {
    const json = JSON.parse(response.responseText);
    const api = response.responseURL.split('?').shift().split('/').pop();
    console.debug('------------------------------');
    console.debug(response);
    console.debug(api);
    console.debug(json);
    switch (api) {
        case 'device_follow.json': {
            if (!json.globalObjects.tweets) return;
            Object.entries(json.globalObjects.tweets).forEach(([key, value]) => {
                xhr_data_set[key] = {
                    rest_id: key,
                    legacy: value,
                    core: { user_results: { result: { core: {
                        created_at : json.globalObjects.users[value.user_id_str].created_at,
                        name: json.globalObjects.users[value.user_id_str].name,
                        screen_name: json.globalObjects.users[value.user_id_str].screen_name,
                    }, }, }, },
                }
            });
            break;
        }
        case 'UserByScreenName':
        case 'HomeLatestTimeline':
        case 'HomeTimeline':
        case 'UserTweets':
        case 'TweetDetail':
        case 'UserMedia': {
            deep_search(json);
            break;
        }
    }
    console.debug('xhr_data_set', xhr_data_set);
}

(function override_xhr_send() {
    const original_send = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function(body) {
        this.addEventListener('readystatechange', () => {
            if (this.readyState === 4 && xhr_api_keywords.some(e => this.responseURL.includes(e))) {
                get_tweet_response_data(this);
            }
        });
        return original_send.apply(this, arguments);
    };
})();

class Downloader {
    constructor() {
        this.tasks = [];
        this.thread = 0;
        this.max_thread = 2;
        this.retry = 0;
        this.max_retry = 2;
        this.failed = 0;
        this.notifier;
        this.has_failed = false;

        console.debug(this);
    }

    add(task) {
        this.tasks.push(task);
        if (this.thread < this.max_thread) {
            this.thread += 1;
            this.next();
        }
        else {
            this.update();
        }
    }

    async next() {
        let task = this.tasks.shift();
        await this.start(task);
        if (this.tasks.length > 0 && this.thread <= this.max_thread) {
            this.next();
        }
        else {
            this.thread -= 1;
        }
        this.update();
    }

    start(task) {
        this.update();
        return new Promise(resolve => {
            GM_download({
                url: task.url,
                name: task.name,
                onload: (result) => {
                    task.onload();
                    resolve();
                },
                onerror: (result) => {
                    this.retry(task, result);
                    resolve();
                },
                ontimeout: (result) => {
                    this.retry(task, result);
                    resolve();
                }
            });
        });
    }

    retry(task, result) {
        this.retry += 1;
        if (this.retry == 3) {
            this.max_thread = 1;
        }
        if (task.retry && task.retry >= this.max_retry || result.details && result.details.current == 'USER_CANCELED') {
            task.onerror(result);
            this.failed += 1;
        }
        else {
            if (this.max_thread == 1) task.retry = (task.retry || 0) + 1;
            this.add(task);
        }
    }

    update() {
        if (!this.notifier) {
            this.notifier = document.createElement('div');
            this.notifier.title = 'Twitter Media Downloader';
            this.notifier.classList.add(`tmd-notifier`);
            this.notifier.innerHTML = '<label>0</label>|<label>0</label>';
            document.body.appendChild(this.notifier);
        }
        if (this.failed > 0 && !this.has_failed) {
            this.has_failed = true;
            this.notifier.innerHTML += '|';
            let clear = document.createElement('label');
            this.notifier.appendChild(clear);
            clear.onclick = () => {
                this.notifier.innerHTML = '<label>0</label>|<label>0</label>';
                this.failed = 0;
                this.has_failed = false;
                this.update();
            };
        }
        this.notifier.firstChild.innerText = this.thread;
        this.notifier.firstChild.nextElementSibling.innerText = this.tasks.length;
        if (this.failed > 0) {
            this.notifier.lastChild.innerText = this.failed;
        }
        if (this.thread > 0 || this.tasks.length > 0 || this.failed > 0) {
            this.notifier.classList.add('running');
        }
        else {
            this.notifier.classList.remove('running');
        }
    }
}

class TwitterMediaDownloader {
    constructor() {
        this.selector = {
            download_button_common: 'tmd-down',
            download_button_media_tab: 'tmd-media',
            download_button_photo: 'tmd-img',
            download_status_notifier: 'tmd-notifier',
        };

        this.css = (() => {
            return `
.${this.selector.download_button_common} {margin-left: 12px; order: 99;}
.${this.selector.download_button_common}:hover > div > div > div > div {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}:hover > div > div > div > div > div {background-color: rgba(29, 161, 242, 0.1);}
.${this.selector.download_button_common}:active > div > div > div > div > div {background-color: rgba(29, 161, 242, 0.2);}
.${this.selector.download_button_common}:hover svg {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}:hover div:first-child:not(:last-child) {background-color: rgba(29, 161, 242, 0.1);}
.${this.selector.download_button_common}:active div:first-child:not(:last-child) {background-color: rgba(29, 161, 242, 0.2);}

.${this.selector.download_button_common}.${this.selector.download_button_media_tab} {position: absolute; right: 0;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab} > div {display: flex; border-radius: 99px; margin: 2px;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab} > div > div {display: flex; margin: 6px; color: #fff;}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:hover > div {background-color: rgba(255,255,255, 0.6);}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:hover > div > div {color: rgba(29, 161, 242, 1.0);}
.${this.selector.download_button_common}.${this.selector.download_button_media_tab}:not(:hover) > div > div {filter: drop-shadow(0 0 1px #000);}

.${this.selector.download_button_common} g {display: none;}

.${this.selector.download_button_common}.download g.download,
.${this.selector.download_button_common}.completed g.completed,
.${this.selector.download_button_common}.loading g.loading,
.${this.selector.download_button_common}.failed g.failed {display: unset;}

.${this.selector.download_button_common}.loading svg {animation: spin 1s linear infinite;}

@keyframes spin {0% {transform: rotate(0deg);} 100% {transform: rotate(360deg);}}
.tmd-btn {display: inline-block; background-color: #1DA1F2; color: #FFFFFF; padding: 0 20px; border-radius: 99px;}
.tmd-tag {display: inline-block; background-color: #FFFFFF; color: #1DA1F2; padding: 0 10px; border-radius: 10px; border: 1px solid #1DA1F2;  font-weight: bold; margin: 5px;}
.tmd-btn:hover {background-color: rgba(29, 161, 242, 0.9);}
.tmd-tag:hover {background-color: rgba(29, 161, 242, 0.1);}

.tmd-notifier {display: none; position: fixed; left: 16px; bottom: 16px; color: #000; background: #fff; border: 1px solid #ccc; border-radius: 8px; padding: 4px;}
.tmd-notifier.running {display: flex; align-items: center;}
.tmd-notifier label {display: inline-flex; align-items: center; margin: 0 8px;}
.tmd-notifier label:before {content: " "; width: 32px; height: 16px; background-position: center; background-repeat: no-repeat;}
.tmd-notifier label:nth-child(1):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l4,4 q1,1 2,0 l4,-4 M12,3 v11%22 fill=%22none%22 stroke=%22%23666%22 stroke-width=%222%22 stroke-linecap=%22round%22 /></svg>");}
.tmd-notifier label:nth-child(2):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M12,2 a1,1 0 0 1 0,20 a1,1 0 0 1 0,-20 M12,5 v7 h6%22 fill=%22none%22 stroke=%22%23999%22 stroke-width=%222%22 stroke-linejoin=%22round%22 stroke-linecap=%22round%22 /></svg>");}
.tmd-notifier label:nth-child(3):before {background-image:url("data:image/svg+xml;charset=utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2216%22 height=%2216%22 viewBox=%220 0 24 24%22><path d=%22M12,0 a2,2 0 0 0 0,24 a2,2 0 0 0 0,-24%22 fill=%22%23f66%22 stroke=%22none%22 /><path d=%22M14.5,5 a1,1 0 0 0 -5,0 l0.5,9 a1,1 0 0 0 4,0 z M12,17 a2,2 0 0 0 0,5 a2,2 0 0 0 0,-5%22 fill=%22%23fff%22 stroke=%22none%22 /></svg>");}

.${this.selector.download_button_common}.${this.selector.download_button_photo} {position: absolute; right: 0; bottom: 0; display: none !important;}
.${this.selector.download_button_common}.${this.selector.download_button_photo} > div {display: flex; border-radius: 99px; margin: 2px; background-color: rgba(255,255,255, 0.6);}
.${this.selector.download_button_common}.${this.selector.download_button_photo} > div > div {display: flex; margin: 6px; color: #fff !important;}
.${this.selector.download_button_common}.${this.selector.download_button_photo}:not(:hover) > div > div {filter: drop-shadow(0 0 1px #000);}
.${this.selector.download_button_common}.${this.selector.download_button_photo}:hover > div > div {color: rgba(29, 161, 242, 1.0);}

:hover > .${this.selector.download_button_common}.${this.selector.download_button_photo},
.${this.selector.download_button_photo}.loading,
.${this.selector.download_button_photo}.completed,
.${this.selector.download_button_photo}.failed {display: block !important;}

.tweet-detail-action-item {width: 20% !important;}
    `;
        })();
        document.head.insertAdjacentHTML('beforeend', '<style id="tmd">' + this.css + '</style>');

        this.download_button_svg = (() => {
            return `
<g class="download"><path d="M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l4,4 q1,1 2,0 l4,-4 M12,3 v11" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" /></g>
<g class="completed"><path d="M3,14 v5 q0,2 2,2 h14 q2,0 2,-2 v-5 M7,10 l3,4 q1,1 2,0 l8,-11" fill="none" stroke="#1DA1F2" stroke-width="2" stroke-linecap="round" /></g>
<g class="loading"><circle cx="12" cy="12" r="10" fill="none" stroke="#1DA1F2" stroke-width="4" opacity="0.4" /><path d="M12,2 a10,10 0 0 1 10,10" fill="none" stroke="#1DA1F2" stroke-width="4" stroke-linecap="round" /></g>
<g class="failed"><circle cx="12" cy="12" r="11" fill="#f33" stroke="currentColor" stroke-width="2" opacity="0.8" /><path d="M14,5 a1,1 0 0 0 -4,0 l0.5,9.5 a1.5,1.5 0 0 0 3,0 z M12,17 a2,2 0 0 0 0,4 a2,2 0 0 0 0,-4" fill="#fff" stroke="none" /></g>
`;
        })();
        this.download_button_status = {
            download: 'download',
            completed: 'completed',
            loading: 'loading',
            failed: 'failed',
        }
        this.download_button_title = (() => {
            const language = { 'en': {}, 'zh-Hant': {}, };
            language['en'][this.download_button_status.download] = 'Download';
            language['en'][this.download_button_status.completed] = 'Download Completed';
            language['en'][this.download_button_status.loading] = 'Downloading...';
            language['en'][this.download_button_status.failed] = 'Download Failed';
            language['zh-Hant'][this.download_button_status.download] = '下載';
            language['zh-Hant'][this.download_button_status.completed] = '下載完成';
            language['zh-Hant'][this.download_button_status.loading] = '下載中...';
            language['zh-Hant'][this.download_button_status.failed] = '下載失敗';
            return language[document.querySelector('html').lang || navigator.language || 'en'];
        })();

        this.download_history = null;
        this.update_download_history();

        this.downloader = new Downloader();

        this.time_split = '·';
        this.pixiv_html = (() => {
            return `
<div id="pixiv-container" style="display: flex; flex-direction: column; flex: 0 1 auto; padding: 0px 10px;">
    <div style="display: flex; flex: 0 1 auto; padding-bottom: 4px;">
        <span id="pixiv-input-title" style="display: flex; font-family: Segoe UI; padding-right: 4px; flex: 0 2 auto; width: 100%;">Pixiv ID</span>
        <input id="pixiv-input" type="text" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; width: 100%; background: #404040; border: #FFFFFF solid 1px;">
    </div>
    <input id="pixiv-button" type="button" value="GM_setValue" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; background: #404040; border: #FFFFFF solid 1px;">
    <div style="display: flex; flex: 0 1 auto;">
        <span id="pixiv-result" style="display: flex; font-family: Segoe UI; flex: 0 1 auto;"></span>
        <a id="pixiv-link" target="_blank" style="display: flex; font-family: Segoe UI; flex: 0 1 auto; color: #1D9BF0; text-decoration: underline;"></a>
    </div>
</div>`
        })();

        this.observer_document();
    }

    update_download_history(status_id) {
        const history = GM_getValue('download_history', []);
        if (status_id && !history.includes(status_id)) {
            history.push(status_id);
            GM_setValue('download_history', history);
        }
        this.download_history = history;
    }

    create_download_button_on_image(type, status) {
        const button = document.createElement('div');
        button.innerHTML = '<div><div><svg viewBox="0 0 24 24" style="width: 18px; height: 18px;">' + this.download_button_svg + '</svg></div></div>';
        button.classList.add(this.selector.download_button_common);
        if (type) button.classList.add(type);
        this.update_download_button(button, status ? status : this.download_button_status.download);
        return button;
    }

    update_download_button(button, status) {
        if (status) {
            button.classList.remove(...Object.values(this.download_button_status));
            button.classList.add(this.download_button_status[status]);
            button.title = this.download_button_title[this.download_button_status[status]];
        }
    }

    onclick_download_button(button, status_id, index, data) {
        if (button.classList.contains(this.download_button_status.loading)) return;
        this.update_download_button(button, this.download_button_status.loading);

        if (!data) { this.update_download_button(button, this.download_button_status.failed); return; }

        const medias = index ? [data.legacy.extended_entities?.media?.[index - 1]] : data.legacy.extended_entities?.media;
        if (!medias?.length) { this.update_download_button(button, this.download_button_status.failed); return; }

        let tasks = medias.length;
        medias.forEach((media, i) => {
            const download_info = {};
            download_info.file_name = file_name;
            download_info.date_time = Formatter.date(data.legacy.created_at, 'YYYYMMDD_hhmmss');

            download_info['url'] = media.type == 'photo' ? `${media.media_url_https}:orig` : media.video_info.variants.filter(n => n.content_type == 'video/mp4').sort((a, b) => b.bitrate - a.bitrate)[0].url;
            download_info['user-id'] = data.core.user_results.result.core.screen_name;
            download_info['status-id'] = status_id;
            download_info['ext'] = download_info['url'].split('.').pop().split(':').shift().split('?').shift();

            download_info['output'] = `${download_info.file_name}-${index ? index-1 : i}.{ext}`.replace(/{([^{}:]+)(:[^{}]+)?}/g, (match, name) => download_info[name]);

            console.debug(download_info);

            this.downloader.add({
                url: download_info.url,
                name: download_info.output,
                onload: () => {
                    tasks -= 1;
                    if (tasks !== 0) return;
                    this.update_download_button(button, this.download_button_status.completed);
                    if (index) return;
                    this.update_download_history(status_id);
                },
                onerror: (result) => {
                    tasks = -1;
                    console.error(result);
                    this.update_download_button(button, this.download_button_status.failed);
                }
            });
        });
    }

    add_to_article_photo_download_button(node) {
        if (!node.src.includes('/media/')) return;

        if (!node.closest('article')) return;

        const photo = node.closest('a[href*="/photo/"]');
        if (!photo) return;

        if (photo.parentNode.querySelector(`.${this.selector.download_button_common}`)) return;

        const [status_id, index] = photo.href.split('/status/').pop().split('/photo/');

        const button = this.create_download_button_on_image(this.selector.download_button_photo, this.download_button_status.download);
        photo.parentNode.appendChild(button);
        button.onclick = (e) => {
            e.preventDefault();
            this.onclick_download_button(button, status_id, index, xhr_data_set[status_id]);
        }
    }

    add_to_media_tab_download_button(node) {
        const li = node.closest(`li[role="listitem"][id*="verticalGridItem"]:not(:has(.${this.selector.download_button_media_tab}))`);
        if (!li) return;

        const status_id = li.querySelector('a[href*="/status/"]')?.href.split('/status/').pop().split('/').shift();
        const index = null;

        const data = xhr_data_set[status_id];
        if (!data) return;

        const sizes = data.legacy.extended_entities.media.map(e => `${e.original_info.width}x${e.original_info.height}`);

        if (data.legacy.full_text) node.title = `${data.legacy.full_text}\n${new Date(data.legacy.created_at).toLocaleString('zh-tw', { hourCycle:'h24' })}\n${sizes.join('\n')}`;

        const button_status = this.download_history.includes(status_id) ? this.download_button_status.completed : this.download_button_status.download;
        const button = this.create_download_button_on_image(this.selector.download_button_media_tab, button_status);
        button.onclick = () => this.onclick_download_button(button, status_id, index, data);
        li.appendChild(button);
    }

    add_to_article_download_button(node) {
        const article = node.closest('article');
        if (!article) return;

        const button_group = article.querySelector('div[role="group"]');
        if (!button_group || button_group.querySelector(`.${this.selector.download_button_common}`)) return;

        const media = article.querySelector('a[href*="/photo/"], [aria-label*="語音貼文"], [aria-label*="嵌入的影片"], [aria-label*="GIF"]');
        if (!media) return;

        const times = Array.from(article.querySelectorAll('time'));
        const time = location.href.includes('status') ? times.pop() : times.shift();

        const status_id = time.closest('a')?.href.split('/status/').pop().split('/').shift();
        if (!status_id) return;

        if (media.tagName == 'A') {
            const image_status_id = media.href.split('/status/').pop().split('/').shift();
            if (image_status_id != status_id) return;
        }

        const button_download = button_group.lastChild.cloneNode(true);
        button_download.querySelector('svg').innerHTML = this.download_button_svg;
        const button_status = this.download_history.includes(status_id) ? this.download_button_status.completed : this.download_button_status.download;
        button_download.classList.add(this.selector.download_button_common);
        this.update_download_button(button_download, button_status);
        button_group.appendChild(button_download);
        button_download.onclick = () => this.onclick_download_button(button_download, status_id, null, xhr_data_set[status_id]);
    }

    update_time_textContent(time) {
        if (time.textContent.includes(':') && time.textContent.includes('/')) return;

        const date = new Date(time.dateTime);
        if (isNaN(date)) return;

        if (time.textContent.includes(this.time_split)) {
            time.textContent = [new Date(time.dateTime).toLocaleTimeString(), ...time.textContent.split(' ').slice(1, 3)].join(' ');
        }
        else {
            time.textContent = `${time.textContent} ${this.time_split} ${new Date(time.dateTime).toLocaleString('zh-tw', { hourCycle:'h24' })}`;
        }
    }

    add_to_article_time(node) {
        if (!node.src.includes('/profile_images/')) return;

        const article = node.closest('article:has(time)');
        if (!article) return;

        article.querySelectorAll('time').forEach((time) => {
            this.update_time_textContent(time);

            const a = time.closest('a');
            if (!a) return;

            new MutationObserver(() => { this.update_time_textContent(time); }).observe(a, { attributes: true, attributeFilter: ['aria-label'] });
        });
    }

    add_to_article_retweet_time(node) {
        if (!node.src.includes('/profile_images/')) return;

        const article = node.closest('article');
        if (!article) return;

        const retweet_span = article.querySelector('span[data-testid="socialContext"]:not([added-retweet-time])');
        if (!retweet_span) return;

        const time = article.querySelector('time');
        const status_id = time.closest('a')?.href.split('/status/').pop().split('/').shift();
        if (!status_id) return;

        const retweet_data = Object.values(xhr_data_set).find(e => e.legacy?.retweeted_status_result?.result?.rest_id === status_id || e.legacy?.retweeted_status_id_str === status_id);
        // console.debug(time);
        // console.debug(status_id);
        // console.debug(retweet_data);
        if (!retweet_data) return;

        const retweet_time = new Date(retweet_data.legacy.created_at).toLocaleString('zh-tw', { hourCycle:'h24' });
        retweet_span.lastChild.textContent = `${retweet_span.lastChild.textContent} (${retweet_time})`;
        retweet_span.setAttribute('added-retweet-time', '');
    }

    add_to_article_pixiv(node) {
        if (!node.src.includes('/media/')) return;

        const article = node.closest('article');
        if (!article) return;

        const times = Array.from(article.querySelectorAll('time'));
        const time = location.href.includes('status') ? times.pop() : times.shift();
        if (!time) return;

        const a = time.closest('a');
        if (!a) return;

        const pixiv_id = this.get_pixiv_id(a.href);
        if (!pixiv_id) return;

        const parent = a.closest('div:has(div[dir="ltr"][aria-hidden="true"]):not(:has(a#pixiv-tweet-link))');
        if (!parent) return;

        const dot = parent.querySelector('div[dir="ltr"][aria-hidden="true"]');
        parent.appendChild(dot.cloneNode(true));

        const pixiv_element = document.createElement('a');
        parent.appendChild(pixiv_element);
        pixiv_element.innerHTML = `<a id="pixiv-tweet-link" href="https://www.pixiv.net/users/${pixiv_id}/illustrations" target="_blank" style="font-family: Segoe UI; color: #1D9BF0; text-decoration: underline;">Pixiv</a>`;
    }

    add_to_user_page_pixiv_input(node) {
        if (!node.src.includes('/profile_images/') || !node?.alt.includes('開啟個人資料相片')) return;

        const user_avatar_container = node.closest('div[data-testid*="UserAvatar-Container"]');
        if (!user_avatar_container) return;

        if (document.querySelector('#pixiv_container')) return;

        const pixiv_container = document.createElement('div');
        user_avatar_container.after(pixiv_container);
        user_avatar_container.parentElement.style.flexWrap = 'nowrap';
        pixiv_container.innerHTML = this.pixiv_html;

        const i = pixiv_container.querySelector('#pixiv-input');
        const b = pixiv_container.querySelector('#pixiv-button');
        const l = pixiv_container.querySelector('#pixiv-link');
        const r = pixiv_container.querySelector('#pixiv-result');
        const pixiv_id = this.get_pixiv_id(location.href);
        if (pixiv_id) {
            i.value = pixiv_id;
            i.readOnly = true;
            b.disabled = true;
            l.textContent = `pixiv.net/users/${pixiv_id}`;
            l.href = `https://www.pixiv.net/users/${pixiv_id}/illustrations`;
        }
        b.onclick = () => {
            const pixiv_id_input = i.value;
            if (Number.isInteger(Number(pixiv_id_input)) && pixiv_id_input != '') {
                const pixiv_id_list = GM_getValue('pixiv_id', {});
                const twitter_id = location.href.toLowerCase().split('/')[3];
                pixiv_id_list[twitter_id] = pixiv_id_input;
                GM_setValue('pixiv_id', pixiv_id_list);
                i.readOnly = true;
                b.disabled = true;
                r.textContent = '';
                l.textContent = `pixiv.net/users/${pixiv_id_input}`;
                l.href = `https://www.pixiv.net/users/${pixiv_id_input}/illustrations`;
            }
            else {
                r.textContent = 'NaN';
                l.textContent = '';
                l.href = '';
            }
        }
    }

    get_pixiv_id(twitter_href_or_id) {
        const twitter_id = twitter_href_or_id.includes('http') ? twitter_href_or_id.toLowerCase().split('/')[3] : twitter_href_or_id.toLowerCase();
        return GM_getValue('pixiv_id', {})[twitter_id];
    }

    open_image_in_media_viewer(node) {
        if (!node.src.includes('/media/')) return;

        const photo = node.closest('a[href*="/photo/"]');
        if (!photo) return;

        const [status_id, index] = photo.href.split('/status/').pop().split('/photo/');
        if (!status_id) return;

        const json = xhr_data_set[status_id];
        if (!json) return;

        const media = json.legacy.extended_entities.media || json.legacy.entities.media;
        if (!media) return;

        const photos = media.filter(e => e.type === 'photo').map(e => `${e.media_url_https.slice(0, e.media_url_https.lastIndexOf('.'))}?format=${e.media_url_https.split('.').pop()}&name=orig`);
        if (!photos) return;

        const info = {
            'user': {
                'id': json.core.user_results.result.core.screen_name,
                'name': json.core.user_results.result.core.name,
            },
            'status_id': status_id,
            'media': photos,
        }

        node.onclick = (e) => {
            e.preventDefault();
            this.create_media_viewer();
            this.add_image_to_media_viewer(info);
        }
    }

    create_media_viewer() {
        let renderer = document.querySelector('.media_viewer_renderer');
        if (renderer) {
            this.open_media_viewer();
            return;
        }

        renderer = document.createElement('div');
        document.body.appendChild(renderer);
        renderer.classList.add('media_viewer_renderer');
        renderer.style = `display: flex; position: fixed; inset: 0px; z-index: 10000; background: rgba(0, 0, 0, 0.8); flex-direction: column;`;

        const header = document.createElement('div');
        renderer.appendChild(header);
        header.classList.add('media_viewer_header');
        header.style = `display: flex; background: rgb(27, 40, 54); width: 100%; justify-content: space-between;`;

        // left this span to keep flex
        const span_style = document.createElement('span');
        header.appendChild(span_style);
        span_style.classList.add('media_viewer_header_span_style');

        const span_index = document.createElement('span');
        header.appendChild(span_index);
        span_index.classList.add('media_viewer_header_span_index');
        span_index.style = `color: #FFFFFF; padding: 0px 4px;`;
        span_index.textContent = '0 / 0';

        const span_close = document.createElement('span');
        header.appendChild(span_close);
        span_close.classList.add('media_viewer_header_span_close');
        span_close.style = `color: #FFFFFF; padding: 0px 4px; cursor: pointer;`;
        span_close.textContent = 'Close [Esc]';
        span_close.onclick = () => this.close_media_viewer();

        const image_container = document.createElement('div');
        renderer.appendChild(image_container);
        image_container.classList.add('media_viewer_image_container');
        image_container.style = `display: flex; flex-direction: column; align-items: center; overflow: hidden auto; width: 100%; height: 100%`;
        image_container.onclick = (e) => {
            if (e.target === image_container) {
                this.close_media_viewer();
            }
        }

        for (let i = 0; i < 4; i++) {
            const img = document.createElement('img');
            image_container.appendChild(img);
            img.classList.add('media_viewer_image');
            img.setAttribute('draggable', false);
            img.style = `cursor: pointer; margin: 4px 0px; max-width: 99%; max-height: 99%;`;
        }

        document.body.addEventListener("keydown", (e) => {
            switch (e.keyCode) {
                case 27: {
                    this.close_media_viewer();
                    break;
                }
            }
        });
    }

    close_media_viewer() {
        const renderer = document.querySelector('.media_viewer_renderer');
        if (!renderer) return;
        renderer.style.inset = 'unset';
    }

    open_media_viewer() {
        const renderer = document.querySelector('.media_viewer_renderer');
        if (!renderer) return;
        renderer.style.inset = '0px';
    }

    add_image_to_media_viewer(info) {
        const renderer = document.querySelector('.media_viewer_renderer');
        const span_index = renderer.querySelector('.media_viewer_header_span_index');
        const image_container = renderer.querySelector('.media_viewer_image_container');
        let image_top_offset = 0;

        renderer.querySelectorAll('.media_viewer_image').forEach((img, index) => {
            if (index == 0) {
                image_top_offset = img.offsetTop;
            }

            img.src = info.media[index] || '';
            img.onclick = (e) => {
                image_container.scroll({ top: img.offsetTop - image_top_offset});
            }
            img.onmouseover = (e) => {
                span_index.textContent = `${index + 1} / ${info.media.length} (${img.naturalWidth}x${img.naturalHeight})`;
            }
        });
    }

    add_to_profile_join_time(node) {
        const timeline = node.parentElement;

        const screen_name = timeline.querySelector('div[data-testid="UserName"] div[tabindex="-1"] span')?.textContent.replace('@', '');
        if (!screen_name) return;

        const data = Object.values(xhr_data_set).find(e => e.core?.screen_name === screen_name);
        if (!data) return;

        const user_join_date = timeline.querySelector('span[data-testid="UserJoinDate"] span');
        if (!user_join_date) return;

        const join_time = new Date(data.core.created_at).toLocaleString('zh-tw', { hourCycle:'h24' });
        user_join_date.textContent = `${user_join_date.textContent.split(' (').shift()} (${join_time})`;
    }

    parsing_node(node) {
        if (node.tagName == 'IMG') {
            this.add_to_article_photo_download_button(node);
            this.add_to_media_tab_download_button(node);
            this.add_to_article_time(node);
            this.add_to_article_retweet_time(node);
            this.add_to_article_pixiv(node);
            this.add_to_user_page_pixiv_input(node);
            this.open_image_in_media_viewer(node);
        }
        else if (node.tagName == 'DIV') {
            this.add_to_article_download_button(node);
        }
        else if (node.tagName == 'SECTION') {
            this.add_to_profile_join_time(node); // Must be here cause profile DOM loaded before request 'UserByScreenName'.
        }
    }

    observer_document() {
        const ignore_target_tagName = ['HTML', 'HEAD', 'BODY', 'TITLE', 'SCRIPT', 'STYLE', 'FORM', 'BUTTON', 'svg', 'g'];
        const observer = new MutationObserver((array) => {
            const array_filter = array.filter(e => e.addedNodes.length).filter(e => !ignore_target_tagName.some(tag => e.target.tagName.includes(tag)));
            array_filter.forEach((mutation_record) => {
                // console.debug([mutation_record.target.tagName, ...Array.from(mutation_record.addedNodes).map(e => e.tagName)], mutation_record);
                mutation_record.addedNodes.forEach((node) => {
                    this.parsing_node(node);
                });
            });
        });
        observer.observe(document, { attributes: false, childList: true, subtree: true });
    }
}

class Formatter {
    static abbr = {
        month: { Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06', Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12' },
        week: {
            'en': { Sun: 'Sun', Mon: 'Mon', Tue: 'Tue', Wed: 'Wed', Thu: 'Thu', Fri: 'Fri', Sat: 'Sat', },
            'zh-TW': { Sun: '日', Mon: '一', Tue: '二', Wed: '三', Thu: '四', Fri: '五', Sat: '六', },
            'ja': { Sun: '日', Mon: '月', Tue: '火', Wed: '水', Thu: '木', Fri: '金', Sat: '土', },
        }[navigator.language],
    }

    static two_digits(number) {
        return number.toString().padStart(2, '0');
    }

    static time_from_seconds(seconds) {
        const [s, m, h] = [seconds % 60, (seconds / 60) % 60, seconds / 3600].map((e) => Math.floor(e));
        return h > 0 ? `${h}:${this.two_digits(m)}:${this.two_digits(s)}` : `${m}:${this.two_digits(s)}`;
    }

    static date (time, format, to_UTC) {
        const date = new Date(time);
        if (to_UTC) date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        const [week, month, day, year, hour, minute, second] = date.toString().replaceAll(':', ' ').split(' ');
        const result = {
            YYYY: year,
            YY: year.substr(-2),
            MM: this.abbr.month[month],
            DD: day,
            hh: hour,
            mm: minute,
            ss: second,
            h12: `${date.getHours() % 12}`.padStart(2, '0'),
            ap: date.getHours() < 12 ? 'AM' : 'PM',
            W: this.abbr.week[week],
        };
        return format.replace(/(YY(YY)?|MM(M)?|DD|W|hh|mm|ss|h12|ap)/g, e => result[e]);
    }

    static time_to_seconds(time) {
        const [s, m, h] = time.split(':').reverse().map((e) => Math.abs(Number(e)));
        const seconds = s + (m || 0) * 60 + (h || 0) * 3600;
        return time[0] == '-' ? -seconds : seconds;
    }
}

new TwitterMediaDownloader();
