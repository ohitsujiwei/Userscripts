// ==UserScript==
// @name        Twitch Clean Directory
// @namespace   Violentmonkey Scripts
// @match       https://www.twitch.tv/directory/all
// @version     2.0.0
// @author      Nekone
// @description 2024/7/3 下午3:17:31
// @icon        https://www.google.com/s2/favicons?sz=64&domain=twitch.tv
// @grant       GM_setValue
// @grant       GM_getValue
// @grant       GM_addStyle
// ==/UserScript==

"use strict"

GM_addStyle(`

/* "Live" on thumbnail */
/* .jHpjIV { display: none !important; } */

/* "Scrollbar" on left side channel list */
.simplebar-scrollbar { opacity: .7 !important; }

.Layout-sc-1xcs6mc-0.huPzQU { margin: 0 1rem !important; }
.Layout-sc-1xcs6mc-0.jkApnw { display: none !important; }
.Layout-sc-1xcs6mc-0.daZyRV { display: none !important; }
.Layout-sc-1xcs6mc-0.ihPdzq { padding-top: unset !important; }
.Layout-sc-1xcs6mc-0.gsDkeW { padding-bottom: unset !important; }
.Layout-sc-1xcs6mc-0.jgaOay { padding-top: unset !important; }
.Layout-sc-1xcs6mc-0.ivrFkx { margin-bottom: unset !important; }
.Layout-sc-1xcs6mc-0.khvxFN.tw-tabs .jNIlkd { display: none !important; }

`)

const KEEP_PARENT_DIV = false // Leaving a area in the channel list?

const blacklist = [
]

let directory_container = null
let filter_options = null
let tabs = null
function wait_elements() {
    return new Promise((resolve) => {
        const observer = new MutationObserver(() => {
            const e = [
                directory_container = document.querySelector('.ScTower-sc-1sjzzes-0.fwymPs.tw-tower') ,
                filter_options = document.querySelector('#browse-root-filter-sort-options') ,
                tabs = document.querySelector('.Layout-sc-1xcs6mc-0.khvxFN.tw-tabs') ,
            ]
            if (!e.includes(null)) {
                if (directory_container?.querySelectorAll('div[style*="order"]')?.length > 1) {
                    tabs.appendChild(filter_options)
                    observer.disconnect()
                    resolve()
                }
            }
        })
        observer.observe(document.body, { attributes: false, childList: true, subtree: true })
    })
}

function remove_blacklist_channel() {
    directory_container?.querySelectorAll('div.Layout-sc-1xcs6mc-0.ivrFkx').forEach((channel, index) => {
        const username = channel.querySelector('div.Layout-sc-1xcs6mc-0.bQImNn').textContent
        blacklist.forEach((id) => {
            if (username.includes(id)) {
                if (KEEP_PARENT_DIV) channel.style.display = 'none'
                else                 channel.parentElement.style.display = 'none'
                console.log(`[Twitch Blacklist] Remove channel[${index}]: ${id}`)
            }
        })
    })
}

(async function() {
    await wait_elements()
    new MutationObserver(remove_blacklist_channel).observe(directory_container, { attributes: false, childList: true, subtree: true })
})();
