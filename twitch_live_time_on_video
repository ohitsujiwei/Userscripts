// ==UserScript==
// @name        Twitch Live Time On Video
// @namespace   Violentmonkey Scripts
// @match       https://www.twitch.tv/*
// @grant       none
// @version     1.0.12
// @author      Nekone
// @description 2025/2/19 上午3:57:17
// @icon        https://www.google.com/s2/favicons?sz=64&domain=twitch.tv
// ==/UserScript==

'use strict';

let global_span = null;
function print(string) {
    global_span ? global_span.textContent = '( ^)o(^ ) -> ' + string : console.log(string);
}

const selector = {
    head_microformat_video_release_date: 'meta[property="og:video:release_date"]',
    head_microformat_live_script: 'script[type="application/ld+json"]',

    video: 'video[webkit-playsinline]',
    current_time: 'span.live-time > span, p[data-a-target="player-seekbar-current-time"]',
    duration: 'p[data-a-target="player-seekbar-duration"]',
    viewer_count: 'p[data-a-target="animated-channel-viewers-count"]',

    player_control_left: '.player-controls__left-control-group',
    player_control_right: '.player-controls__right-control-group',
    player_settings_button: 'button[data-a-target="player-settings-button"]', // to open the settings
    player_settings_menu_item_quality: 'button[data-a-target="player-settings-menu-item-quality"]', // to click the quality option
    player_settings_menu_quality_options: 'div[data-a-target="player-settings-menu"]', // parent of quality options
    player_settings_submenu_quality_option: 'div[data-a-target="player-settings-submenu-quality-option"]', // div of each quality option
    player_settings_root: 'div:has([aria-labelledby="active-settings-menu-header"])', // to hide the process
    player_settings_menu_item_advanced: 'button[data-a-target="player-settings-menu-item-advanced"]', // to click the advanced option
    player_settings_submenu_advanced_video_stats_input: 'div[data-a-target="player-settings-submenu-advanced-video-stats"] input', // to open the stats panel
    player_overlay_video_stats: 'div[data-a-target="player-overlay-video-stats"]', // to hide the stats panel

    video_stats_buffer: 'table p[aria-label="緩衝區大小"]', // to get the buffer
    video_stats_latency: 'table p[aria-label="實況主延遲"]', // to get the latency
    video_stats_latency_mode: 'table p[aria-label="延遲模式"]', // to get the latency mode

    player_settings_submenu_latency_mode_input: 'div[role="menuitemcheckbox"] input[data-a-target="tw-toggle"]', // to toggle the latency mode
};

function add_style() {
    const css = `

.live-time-on-video {
    z-index: 1;
    pointer-events: none;
    position: absolute;
    bottom: 0px;
    left: 4px;
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black;
    font-family: system-ui;
    font-size: medium;
}


.button-on-video[checked] {
    border-color: #88D2FF !important;
    background: #FFA6EA !important;
    color: #000000 !important;
    font-weight: bold !important;
}

.button-on-video {
    padding: 2px;
    margin: 0px 2px;
    border-radius: 4px;
    border-width: 2px;
    border-style: solid;
    border-color: #FFFFFF;
    background: rgba(0, 0, 0, 0.5);
    color: #FFFFFF;
}

p[data-a-target*="player-seekbar"] {
    text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black;
}

`;
    const style = document.createElement('style');
    style.setAttribute('id', 'twitch-live-time-on-video');
    style.textContent = css;
    document.head.appendChild(style);
}

class Formatter {
    static abbr = {
        week: { Sun: '日', Mon: '一', Tue: '二', Wed: '三', Thu: '四', Fri: '五', Sat: '六' },
        month: { Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06', Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12' },
    }
    static two_digits(number) {
        return number.toString().padStart(2, '0');
    }
    static time_from_seconds(seconds) {
        const [s, m, h] = [seconds % 60, (seconds / 60) % 60, seconds / 3600].map((e) => Math.floor(e));
        return h > 0 ? `${h}:${this.two_digits(m)}:${this.two_digits(s)}` : `${m}:${this.two_digits(s)}`;
    }
    static date(start_date, seconds) {
        const present_time = new Date((start_date ? Date.parse(start_date) : 0) + Math.floor(seconds * 1000));
        const [week, month, day, year, time] = present_time.toString().split(' ');
        return `${year}/${this.abbr.month[month]}/${day} (${this.abbr.week[week]}) ${time}`;
    }
    static time_to_seconds(time) {
        if (!time) return 0;
        const [s, m, h] = time.split(':').reverse().map((e) => Math.abs(Number(e)));
        const seconds = s + (m || 0) * 60 + (h || 0) * 3600;
        return time[0] == '-' ? -seconds : seconds;
    }
}

class Waitting {
    static head(selector) {
        print(`Watting.head('${selector}');`);
        return this.promise(selector, document.head);
    }
    static body(selector) {
        print(`Watting.body('${selector}');`);
        return this.promise(selector, document.body);
    }
    static promise(selector, observe) {
        const e = document.querySelector(selector);
        if (e) return new Promise((resolve) => { resolve(e); });
        return new Promise((resolve) => {
            const observer = new MutationObserver(() => {
                const e = document.querySelector(selector);
                if (e) {
                    observer.disconnect();
                    resolve(e);
                }
            });
            observer.observe(observe, { attributes: false, childList: true, subtree: true });
        });
    }
}

function create_span(selector, text, style) {
    let element = document.querySelector(`.${selector}`);
    if (!element) {
        element = document.createElement('span');
        element.setAttribute('class', selector);
        element.textContent = text || '';
        element.style = style || '';
    }
    return element;
}

function get_video_buffer(video) {
    let seconds = null;
    try { seconds = (video.buffered.end(video.buffered.length - 1) - video.currentTime); }
    catch (e) { seconds = 0; }
    finally { return seconds; }
}

function get_microformat() {
    let microformat = {
        '@type': 'VideoObject',
        'description': '',
        'embedUrl': '',
        'name': '',
        'thumbnailUrl': [],
        'uploadDate': '',
        'publication': {
            '@type': 'BroadcastEvent',
            'endDate': '',
            'startDate': '',
            'isLiveBroadcast': false,
        },
    };
    if (location.href.includes('/videos/')) {
        microformat.publication.startDate = document.querySelector(selector.head_microformat_video_release_date).content;
    }
    else {
        const json = document.querySelector(selector.head_microformat_live_script);
        if (json) microformat = JSON.parse(json.textContent)['@graph'][0];
    }
    return microformat;
}

const text_info_value = {};
function update_text_info_value(objects) {
    text_info_value['time-current'] = objects.current_time?.textContent || '';
    // text_info_value['time-current'] = Formatter.time_from_seconds((Date.now() - new Date(objects.microformat.publication.startDate)) / 1000);
    text_info_value['time-separator'] = objects.duration ? '/' : '';
    text_info_value['time-duration'] = objects.duration?.textContent || '';
    text_info_value['status-buffer-health'] = `(B/${objects.buffer ? objects.buffer?.textContent : get_video_buffer(objects.video).toFixed(2)})`;
    text_info_value['status-latency'] = objects.latency ? `(L/${objects.latency?.textContent}/${objects.latency_mode?.textContent})` : '';
    text_info_value['status-view-count'] = objects.viewer_count ? `(V/${objects.viewer_count.textContent})` : '';
    text_info_value['time-date'] = objects.duration ? `(${Formatter.date(objects.microformat?.publication.startDate || '', Formatter.time_to_seconds(objects.current_time?.textContent))})` : '';
    text_info_value['time-now'] = `[${Date().toString().split(' ')[4]}]`;
    text_info_value['video-status'] = `(${objects.video.playbackRate.toFixed(2)}x/${objects.video.muted ? '0%' : `${Math.round(objects.video.volume*100)}%`}${objects.quality ? `/${objects.quality}` : ''})`;

    objects.span.textContent = Object.values(text_info_value).join(' ');
}

async function player_settings_process(objects) {
    function add_button(parent, classname, id, textContent, onclick, to_last) {
        const b = document.createElement('button');
        b.setAttribute('class', classname);
        if (id) b.setAttribute('id', id);
        b.textContent = textContent;
        b.onclick = () => {
            parent.querySelectorAll('.button-on-video').forEach((e) => { b.disabled = true; e.style.cursor = 'no-drop'; });
            onclick();
            parent.querySelectorAll('.button-on-video').forEach((e) => { b.disabled = false; e.style.cursor = ''; });
        };
        if (!to_last) parent.insertBefore(b, parent.firstChild);
        else parent.appendChild(b);
        return b;
    }

    async function add_quality_button_on_control(control) {
        await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
        await Waitting.body(selector.player_settings_root).then((r) => { r.style.display = 'none'; });
        await Waitting.body(selector.player_settings_menu_item_quality).then((b) => { b.click(); });
        await Waitting.body(selector.player_settings_menu_quality_options).then(async (div) => {
            const options = div.querySelectorAll(selector.player_settings_submenu_quality_option);
            options.forEach((submenu, index) => {
                if (index != 1 && index != options.length - 1) return;
                const input = submenu.querySelector('input');
                const label = submenu.querySelector('label').textContent.split(' ')[0].split('(')[0];
                const button = add_button(control, 'button-on-video', 'quality', label, async () => {
                    await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
                    await Waitting.body(selector.player_settings_root).then((r) => { r.style.display = 'none'; });
                    await Waitting.body(selector.player_settings_menu_item_quality).then((b) => { b.click(); });
                    await Waitting.body(selector.player_settings_menu_quality_options).then((div) => { div.childNodes[index].click(); });
                    await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
                    control.querySelectorAll('#quality.button-on-video').forEach((b) => { b.removeAttribute('checked'); });
                    button.setAttribute('checked', '');
                    objects.quality = label;
                });
                if (input.checked) {
                    button.setAttribute('checked', '');
                    objects.quality = label
                };
            });
        });
        await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
    }

    async function add_stats_button_on_control(control) {
        const button = add_button(control, 'button-on-video', 'stats', 'Stats/Disable', async () => {
            if (!document.querySelector(selector.player_overlay_video_stats)) { button.textContent = 'Stats/Disable'; }
            switch (button.textContent) {
                case 'Stats/Hide': {
                    await Waitting.body(selector.player_overlay_video_stats).then((div) => { div.style.display = ''; });
                    button.setAttribute('checked', '');
                    button.textContent = 'Stats/Enable';
                    break;
                }
                case 'Stats/Enable': {
                    await Waitting.body(selector.player_settings_button).then((b) => {
                        b.click();
                    });
                    await Waitting.body(selector.player_settings_root).then((r) => { r.style.display = 'none'; });
                    await Waitting.body(selector.player_settings_menu_item_advanced).then((b) => { b.click(); });
                    await Waitting.body(selector.player_settings_submenu_advanced_video_stats_input).then((i) => { i.click(); });
                    await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
                    objects.buffer = null;
                    objects.latency = null;
                    objects.latency_mode = null;
                    button.removeAttribute('checked');
                    button.textContent = 'Stats/Disable';
                    break;
                }
                case 'Stats/Disable': {
                    await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
                    await Waitting.body(selector.player_settings_root).then((r) => { r.style.display = 'none'; });
                    await Waitting.body(selector.player_settings_menu_item_advanced).then((b) => { b.click(); });
                    await Waitting.body(selector.player_settings_submenu_advanced_video_stats_input).then((i) => { i.click(); });
                    await Waitting.body(selector.player_overlay_video_stats).then(async (div) => {
                        div.style.display = 'none';
                        objects.buffer = await Waitting.body(selector.video_stats_buffer);
                        if (!location.href.includes('/videos/')) {
                            objects.latency = await Waitting.body(selector.video_stats_latency);
                            objects.latency_mode = await Waitting.body(selector.video_stats_latency_mode);
                        }
                    });
                    await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
                    button.setAttribute('checked', '');
                    button.textContent = 'Stats/Hide';
                    break;
                }
            }
        });
        button.click();
        await Waitting.body(selector.player_overlay_video_stats);
    }

    async function add_latency_mode_toggle_button_on_control(control) {
        let write_text_once = true;
        const button = add_button(control, 'button-on-video', 'latency-mode', 'Latency', async () => {
            await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
            await Waitting.body(selector.player_settings_root).then((r) => { r.style.display = 'none'; });
            await Waitting.body(selector.player_settings_menu_item_advanced).then((b) => { b.click(); });
            await Waitting.body(selector.player_settings_submenu_latency_mode_input).then((i) => {
                if (!write_text_once) i.click();
                button.textContent = `Latency/${i.checked ? 'Low' : 'Normal'}`;
                write_text_once = false;
            });
            await Waitting.body(selector.player_settings_button).then((b) => { b.click(); });
        });
        button.click();
        await Waitting.body(selector.player_settings_submenu_latency_mode_input);
    }

    async function add_live_clock_reload_button_on_control(control) {
        const button = add_button(control, 'button-on-video', 'live-clock', 'Reload', async () => {
            objects.current_time = document.querySelector(selector.current_time);
            objects.viewer_count = document.querySelector(selector.viewer_count);
            objects.duration = document.querySelector(selector.duration);

            objects.buffer = document.querySelector(selector.video_stats_buffer);
            objects.latency = document.querySelector(selector.video_stats_latency);
            objects.latency_mode = document.querySelector(selector.video_stats_latency_mode);

            objects.live_clock_oberver.disconnect();
            objects.live_clock_oberver.observe(objects.current_time, { subtree:true, characterData:true });
            console.debug(objects);
        });
    }

    Waitting.body(selector.player_control_right).then(async (control) => {
        await add_quality_button_on_control(control);
        await add_stats_button_on_control(control);
        await add_latency_mode_toggle_button_on_control(control);
        await add_live_clock_reload_button_on_control(control);
    });

    // Waitting.body(selector.player_control_left).then(async (control) => {
    // });
}

(async function main() {
    try {
        if (['www.twitch.tv', '/directory', '/all'].some(e => !location.href.includes(e))) {
            add_style();

            const objects = {
                'video': null,
                'span': null,
                'current_time': null,
                'duration': null,
                'viewer_count': null,
                'volume': null,
                'microformat': null,
                'quality': null,
                'buffer': null,
                'latency': null,
                'latency_mode': null,
                'live_clock_oberver': null,
            };
            objects.microformat = get_microformat();

            Waitting.body(selector.video).then((e) => {
                objects.video = e;
                objects.span = create_span('live-time-on-video', '( ^)o(^ )');
                objects.video.before(objects.span);
                global_span = objects.span;
            });

            player_settings_process(objects);

            if (location.href.includes('/videos/')) {
                Waitting.body(selector.duration).then((e) => { objects.duration = e; });
            }
            else {
                Waitting.body(selector.viewer_count).then((e) => { objects.viewer_count = e; });
            }
            objects.current_time = await Waitting.body(selector.current_time);

            objects.live_clock_oberver = new MutationObserver(() => { update_text_info_value(objects) });
            objects.live_clock_oberver.observe(objects.current_time, { subtree:true, characterData:true });
            // console.debug(objects);

            // objects.video.ontimeupdate = () => { update_text_info_value(objects) };

            // const video_container = await wait_element_body('[data-test-selector="video-player__video-container"]')
            // video_container.addEventListener('wheel', (event) => { change_volume_on_wheel(event, video_container, volume) }, { passive: true })
        }
    }
    catch (e) {
        console.log(e);
    }
})();
