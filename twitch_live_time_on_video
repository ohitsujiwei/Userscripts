// ==UserScript==
// @name        Twitch Live Time On Video
// @namespace   Violentmonkey Scripts
// @match       https://www.twitch.tv/*
// @grant       none
// @version     1.0.2
// @author      Nekone
// @description 2025/2/19 上午3:57:17
// @icon        https://www.google.com/s2/favicons?sz=64&domain=twitch.tv
// ==/UserScript==

'use strict'

class Formatter {
    static abbr = {
        week: { Sun: '日', Mon: '一', Tue: '二', Wed: '三', Thu: '四', Fri: '五', Sat: '六' },
        month: { Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06', Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12' },
    }
    static two_digits(number) {
        return number.toString().padStart(2, '0');
    }
    static time_from_seconds(seconds) {
        const [s, m, h] = [seconds % 60, (seconds / 60) % 60, seconds / 3600].map((e) => Math.floor(e));
        return h > 0 ? `${h}:${this.two_digits(m)}:${this.two_digits(s)}` : `${m}:${this.two_digits(s)}`;
    }
    static date(start_date, seconds) {
        const present_time = new Date((start_date ? Date.parse(start_date) : 0) + Math.floor(seconds * 1000));
        const [week, month, day, year, time] = present_time.toString().split(' ');
        return `${year}/${this.abbr.month[month]}/${day} (${this.abbr.week[week]}) ${time}`;
    }
    static time_to_seconds(time) {
        const [s, m, h] = time.split(':').reverse().map((e) => Math.abs(Number(e)));
        const seconds = s + (m || 0) * 60 + (h || 0) * 3600;
        return time[0] == '-' ? -seconds : seconds;
    }
}

function wait_element_head(selector) {
    return new Promise((resolve) => {
        const observer = new MutationObserver(() => {
            const e = document.querySelector(selector);
            if (e) {
                observer.disconnect();
                resolve(e);
            }
        });
        observer.observe(document.head, { attributes: false, childList: true, subtree: true });
    });
}

function wait_element_body(selector, style) {
    return new Promise((resolve) => {
        const observer = new MutationObserver(() => {
            const e = document.querySelector(selector);
            if (e) {
                if (style) e.style = style;
                observer.disconnect();
                resolve(e);
            }
        });
        observer.observe(document.body, { attributes: false, childList: true, subtree: true });
    });
}

function create_span(selector, text, style) {
    let element = document.querySelector(`.${selector}`);
    if (!element) {
        element = document.createElement('span');
        element.setAttribute('class', selector);
        element.textContent = text || '';
        element.style = style || '';
    }
    return element;
}

function get_video_buffer(video) {
    let seconds = null;
    try { seconds = (video.buffered.end(video.buffered.length - 1) - video.currentTime); }
    catch (e) { seconds = 0.00; }
    finally { return seconds; }
}

async function get_microformat() {
    let microformat = null;
    if (location.href.includes('/videos/')) {
        microformat = {
            '@type': 'VideoObject',
            'description': '',
            'embedUrl': '',
            'name': '',
            'thumbnailUrl': [],
            'uploadDate': '',
            'publication': {
                '@type': 'BroadcastEvent',
                'endDate': '',
                'startDate': '',
                'isLiveBroadcast': false,
            },
        };
        microformat.publication.startDate = (await wait_element_head('meta[property="og:video:release_date"]')).content;
    }
    else {
        microformat = JSON.parse((await wait_element_head('script[type="application/ld+json"]')).textContent)['@graph'][0];
    }
    return microformat;
}

const text_info_value = {};
function update_text_info_value(microformat, video, span, current_time, duration, viewer_count, volume) {
    text_info_value['time-current'] = current_time.textContent;
    text_info_value['time-separator'] = duration ? '/' : '';
    text_info_value['time-duration'] = duration?.textContent || '';
    text_info_value['status-buffer-health'] = `(B/${get_video_buffer(video).toFixed(2)})`;
    text_info_value['status-view-count'] = viewer_count ? `(V/${viewer_count.textContent})` : '';
    text_info_value['time-date'] = duration ? `(${Formatter.date(microformat.publication.startDate, Formatter.time_to_seconds(current_time.textContent))})` : '';
    text_info_value['time-now'] = `[${Date().toString().split(' ')[4]}]`;
    text_info_value['video-playbackrate/volume'] = `(${video.playbackRate.toFixed(2)}x/${volume.ariaValueText})`;

    span.textContent = Object.values(text_info_value).join(' ');
}

(async function main() {
    try {
        if (['www.twitch.tv', '/directory', '/all'].some(e => !location.href.includes(e))) {
            const microformat = await get_microformat();
            const video = await wait_element_body('video[webkit-playsinline]');

            const span = create_span('live-time-on-video', '( ^)o(^ )', `z-index: 1; pointer-events: none; position: absolute; bottom: 0px; left: 4px; text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black; font-family: system-ui; font-size: medium;`);
            video.before(span);

            let current_time = null;
            let duration = null;
            let viewer_count = null;
            const volume = await wait_element_body('input[id*="player-volume-slider"]');
            if (location.href.includes('/videos/')) {
                current_time = await wait_element_body('p[data-a-target="player-seekbar-current-time"]', `text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black;`);
                duration = await wait_element_body('p[data-a-target="player-seekbar-duration"]', `text-shadow: 1px 0px 3px black, -1px 0px 3px black, 0px 1px 3px black, 0px -1px 3px black;`);
            }
            else {
                current_time = await wait_element_body('span.live-time > span');
                viewer_count = await wait_element_body('p[data-a-target="animated-channel-viewers-count"]');
            }
            [[current_time, { subtree:true, characterData:true }], [volume, { attributes:true }]].forEach((e) => {
                new MutationObserver(() => { update_text_info_value(microformat, video, span, current_time, duration, viewer_count, volume) }).observe(...e);
            });

            // const video_container = await wait_element_body('[data-test-selector="video-player__video-container"]')
            // video_container.addEventListener('wheel', (event) => { change_volume_on_wheel(event, video_container, volume) }, { passive: true })
        }
    }
    catch (e) {
        console.log(e);
    }
})();
